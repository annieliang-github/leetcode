
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:

Input: digits = ""
Output: []

Example 3:

Input: digits = "2"
Output: ["a","b","c"]

 

Constraints:

    0 <= digits.length <= 4
    digits[i] is a digit in the range ['2', '9'].

class Solution {
  Map<String, String> phone = new HashMap<String, String>() {{
    put("2", "abc");
    put("3", "def");
    put("4", "ghi");
    put("5", "jkl");
    put("6", "mno");
    put("7", "pqrs");
    put("8", "tuv");
    put("9", "wxyz");
  }};

  List<String> output = new ArrayList<String>();

  public void backtrack(String combination, String next_digits) {
    // if there is no more digits to check
    if (next_digits.length() == 0) {
      // the combination is done
      output.add(combination);
    }
    // if there are still digits to check
    else {
      // iterate over all letters which map 
      // the next available digit
      String digit = next_digits.substring(0, 1);
      String letters = phone.get(digit);
      for (int i = 0; i < letters.length(); i++) {
        String letter = phone.get(digit).substring(i, i + 1);
        // append the current letter to the combination
        // and proceed to the next digits
        backtrack(combination + letter, next_digits.substring(1));
      }
    }
  }

  public List<String> letterCombinations(String digits) {
    if (digits.length() != 0)
      backtrack("", digits);
    return output;
  }
}





class Solution {
    List<String> ans = new ArrayList<>();
    Map<Character, char[]> map = new HashMap<>() {{
        put('2', new char[] {'a', 'b', 'c'});
        put('3', new char[] {'d', 'e', 'f'});
        put('4', new char[] {'g', 'h', 'i'});
        put('5', new char[] {'j', 'k', 'l'});
        put('6', new char[] {'m', 'n', 'o'});
        put('7', new char[] {'p', 'q', 'r', 's'});
        put('8', new char[] {'t', 'u', 'v'});
        put('9', new char[] {'w', 'x', 'y', 'z'});      
    }};
    StringBuilder sb = new StringBuilder();
    
    public List<String> letterCombinations(String digits) {
        if (digits == null || digits.length() == 0) return ans;
        dfs(digits, 0);
        return ans;
    }
    private void dfs(String digits, int index) {
        if (sb.length() == digits.length()) {
        // 这里可以不用deep copy -> new ArrayList<>(subset)
            ans.add(sb.toString());  // new一个String对象，加新对象reference
            return;
        }
        char c = digits.charAt(index); // 当前数字
        char[] letters = map.get(c); // 获取数字对应的字母
        for (int i = 0 ; i < letters.length; i++) {
            sb.append(letters[i]);
        //recurse index，比如"2,3"，loop完2对应的abc，进入3(index+1)
            dfs(digits, index + 1); 
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}

时间复杂度：O(3^m * 4^n)，其中 m 是输入中对应 3 个字母的数字个数（2,3,4,5,6,8），n 是输入中对应 4 个字母的数字个数（7,9）。需要遍历每一种字母组合。

空间复杂度：O(m+n)，除了返回值以外，空间复杂度主要取决于哈希表以及回溯过程中的递归调用层数，哈希表的大小与输入无关，可以看成常数，递归调用层数最大为 m+n。

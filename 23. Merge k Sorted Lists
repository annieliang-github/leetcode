You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6



方法一：小根堆 时间复杂度O(knlogk)，空间复杂度O(k)。N是链表元素的总和，K是链表个数

优先队列中的元素不超过 k 个，插入和删除的时间代价为 O(log⁡k)，这里最多有 kn 个点，对于每个点都被插入删除各一次，故总的时间代价即渐进时间复杂度为 O(knlog⁡k)。

因为每个链表都是有序的，把每个链表放入小顶堆中 (注意放入的是链表)
当小顶堆不为空时，每次弹出最小值，并且把最小值的链表节点往后移动一位（因为当前节点已经加入了排序之后的链表，要开始往后比较），并且加入优先队列继续合并
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // java默认小根堆，但是要根据val排序，注意lambda不需要len参数
        Queue<ListNode> pq = new PriorityQueue<>((a,b) -> a.val - b.val);
        for (ListNode node : lists) {
            if (node != null) pq.offer(node);
        }
        
        ListNode dummy = new ListNode(0);
        ListNode ptr = dummy;
        while (!pq.isEmpty()) {
            ListNode min = pq.poll();
            ptr.next = min; // 连接上ptr
            ptr = ptr.next; // increment ptr
// 如果还有元素，后移一位，放入小根堆重新选最小值
            if (min.next != null) pq.offer(min.next); 
        }
        return dummy.next;
    }
}



class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
            return merge(lists, 0, lists.length - 1);
    }
    
    // mergesort的前提就是right > left
    private ListNode merge(ListNode[] lists, int left, int right) {
        if (left == right) return lists[left];
        if (left > right) return null;
        int mid = left + (right - left) / 2;
        return mergeTwo(merge(lists, left, mid), merge(lists, mid + 1, right));
    }
    
    
    private ListNode mergeTwo(ListNode a, ListNode b) {
        if (a == null) return b;
        if (b == null) return a;
        ListNode dummy = new ListNode(0);
        ListNode aptr = a, bptr = b, curr = dummy;
        while (aptr != null && bptr != null) {
            if (aptr.val < bptr.val) {
                curr.next = aptr;
                aptr = aptr.next;
            } else {
                curr.next = bptr;
                bptr = bptr.next;
            }
            curr = curr.next;
        }
        if (aptr == null) {
            curr.next = bptr;
        } else curr.next = aptr;
        return dummy.next;
    }
}

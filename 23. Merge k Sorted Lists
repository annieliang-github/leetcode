You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
            return merge(lists, 0, lists.length - 1);
    }
    
    // mergesort的前提就是right > left
    private ListNode merge(ListNode[] lists, int left, int right) {
        if (left == right) return lists[left];
        if (left > right) return null;
        int mid = left + (right - left) / 2;
        return mergeTwo(merge(lists, left, mid), merge(lists, mid + 1, right));
    }
    
    
    private ListNode mergeTwo(ListNode a, ListNode b) {
        if (a == null) return b;
        if (b == null) return a;
        ListNode dummy = new ListNode(0);
        ListNode aptr = a, bptr = b, curr = dummy;
        while (aptr != null && bptr != null) {
            if (aptr.val < bptr.val) {
                curr.next = aptr;
                aptr = aptr.next;
            } else {
                curr.next = bptr;
                bptr = bptr.next;
            }
            curr = curr.next;
        }
        if (aptr == null) {
            curr.next = bptr;
        } else curr.next = aptr;
        return dummy.next;
    }
}

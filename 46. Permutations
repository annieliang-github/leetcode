Given an array of distinct integers, return all the possible permutations. You can return the answer in any order.
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


回溯：一种通过探索所有可能的候选解来找出所有的解的算法。如果候选解被确认不是一个解，回溯算法会通过在上一步进行一些变化抛弃该解，即回溯并且再次尝试。

public List<List<Integer>> permute(int[] nums) {
List<List<Integer>> ans = new ArrayList<>();
if (nums == null || nums.length == 0) return ans;
List<Integer> list = new ArrayList<>();
backtrack(list, ans, nums);
return ans;
}
private void backtrack(List<Integer> list, List<List<Integer>> ans, int[] nums) {
    // 如果list中有全部的nums内容(无重复，先判断length)
        if (list.size() == nums.length) { 
            ans.add(new ArrayList<>(list)); // 注意不能直接放，要new一个
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (list.contains(nums[i])) continue; //已包含该元素
            list.add(nums[i]); //未包含，加入list并递归
            backtrack(list, ans, nums);
            list.remove(list.size() - 1); //去掉上一个，重新回溯
        }
}

上面使用contains方法也可以用一个visited数组表示，需注意：如果访问过，continue，其他情况为未访问，加入list，同时把visited设置成true，如果backtracking，需要remove掉上一个，且把visited设置成false（因为退回去了）。

            if (visited[i]) continue; 
            list.add(nums[i]); //未包含，加入list并递归
            visited[i] = true;
            backtrack(list, ans, nums);
            list.remove(list.size() - 1); //去掉上一个，重新回溯
            visited[i] = false;

时间复杂度：O(n×n!)，其中 n 为序列的长度。算法的复杂度首先受 backtrack 的调用次数制约，backtrack 的调用次数是 O(n!) 的。而对于 backtrack 调用的每个叶结点（共 n! 个），我们需要将当前答案使用 O(n) 的时间复制到答案数组中，相乘得时间复杂度为 O(n×n!)。

空间复杂度：O(n)，其中 nnn 为序列的长度。除答案数组以外，递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度 O(n)。

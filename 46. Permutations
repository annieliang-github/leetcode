Given an array of distinct integers, return all the possible permutations. You can return the answer in any order.
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        dfs(list, ans, nums);
        return ans;
    }
    
    private void dfs(List<Integer> list, List<List<Integer>> ans, int[] nums) {
        //合适的答案为，list中有全部的nums内容(无重复，所以判断length)
        if (list.size() == nums.length) {
            ans.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            //list中有nums[i]，代表此数据已使用过，continue
            if (list.contains(nums[i])) continue;
            //list中没有nums[i]，代表此数据未被使用过
            //将此数据加入list并递归下一层，直至找到合适答案为止
            list.add(nums[i]);
            dfs(list, ans, nums);
            list.remove(list.size() - 1);
        }
    }
}

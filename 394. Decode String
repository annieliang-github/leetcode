Given an encoded string, return its decoded string. You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.
Input: s = "3[a]2[bc]"    Output: "aaabcbc"

public String decodeString(String s) {
        Stack<Integer> numStack = new Stack<>(); // 放 number和 []
        Stack<String> strStack = new Stack<>(); // 放字母
        StringBuilder sb = new StringBuilder();
        int num = 0;
        int len = s.length();
        
        for (int i = 0 ; i < len; i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                num = c - '0'; //先获取到当前位的int，再判断下一位是否是数字
                while (i + 1<len && Character.isDigit(s.charAt(i + 1))) {
                        // -'0' char转int，如果还有下一位，*10把个位换十位
                          num = num * 10 + s.charAt(i + 1) - '0';
                          i++;
                }
                numStack.push(num);
            } else if (c == '[') {
                  // 每次遇到左括号，都要把现有str入栈，比如3[a2[c]]
                strStack.push(sb.toString()); //放入 acc
                sb = new StringBuilder(); // 更新sb，清空
            } else if (c == ']') { //遇到右括号，弹出count 再新建temp string
                StringBuilder temp = new StringBuilder(strStack.pop());
                int count = numStack.pop();
                for (int j = 0; j < count; j++) temp.append(sb);
                sb = temp;
            } else sb.append(c); // 字母的情况 
        }
        return sb.toString();
}


时间复杂度：解码后得出的字符串长度为 S，除了遍历一次原字符串 s，我们还需要将解码后的字符串中的每个字符都入栈，并最终拼接进答案中，故渐进时间复杂度为 O(S+∣s∣)，即 O(S)。

空间复杂度：记解码后得出的字符串长度为 S，这里用栈维护 TOKEN，栈的总大小最终与 S 相同，故渐进空间复杂度为 O(S)。

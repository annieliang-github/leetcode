Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.
Input: root = [4,2,5,1,3], target = 3.714286, and k = 2    Output: [4,3]

方法一：使用中序遍历->有序数组，如果长度已经为k了，先递归root.left，比较list最前面的值和root分别与target的差值，如果前面的值大，就踢出去放入root值，否则不动。如果数量没够，就继续加入root，递归右子树。

List<Integer> ans = new ArrayList<>();
public List<Integer> closestKValues(TreeNode root, double target, int k) {
    if (root == null) return ans;
    dfs(root, target, k);
    return ans;
}

private void dfs(TreeNode root, double target, int k) {
    if (root == null) return;
    dfs(root.left, target, k);
    if (ans.size() == k) {
        if (Math.abs(ans.get(0) - target) > Math.abs(root.val - target)) {
            ans.remove(0);
            ans.add(root.val);
} else return; //已经找到k个最近的了
} else {
    ans.add(root.val); // 数量还没到k，继续加入
}
dfs(root.right, target, k);
}
时间复杂度O(n)，空间复杂度O(h+k)

方法二：使用pq maxHeap，只要size大于k了就poll出去。时间复杂度O(nlogK)，空间O(h+k)

new PriorityQueue<>((a, b) -> Math.abs(b-target) - Math.abs(a-target) > 0 ? 1 : -1)
maxHeap的写法是b-a 这里不保证b-a是整数，所以直接cast成1和-1

Queue<TreeNode> queue = new LinkedList<>();
queue.offer(root);
while (!queue.isEmpty()) {
    int size = queue.size();
    for (int i = 0; i < size; i++) {
        poll出curr，并把curr放入pq
        如果pq size > k，pq.poll()
        如果curr.left不空，放入queue，同理curr.right
}
}
return new ArrayList<>(pq);

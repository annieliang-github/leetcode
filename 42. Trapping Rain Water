Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

class Solution {
    public int trap(int[] height) {
        if (height == null || height.length == 0) return 0;
        int totalWater = 0;
        int size = height.length;
        int[] leftMax = new int[size];
        int[] rightMax = new int[size];

       //先构造leftMax是从左开始最高的height
        leftMax[0] = height[0];
        for (int i = 1; i < size; i++) {
            leftMax[i] = Math.max(height[i], leftMax[i - 1]);
        }
       //再构造rightMax是从右开始最高的height
        rightMax[size - 1] = height[size - 1];
        for (int j = size - 2; j >= 0; j--) {
            rightMax[j] = Math.max(height[j], rightMax[j +1]);
        }
        
        for (int i = 0; i < size - 1; i++) { //计算每个index上的minimum
//totalWater就等于minimum的数，减去原本的楼高
            totalWater += Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        return totalWater;
    }
}

You are given a list of non-negative integers, and a target, S. For each integer, you should choose one from + and - as its new symbol. Find out how many ways to assign symbols to make sum of integers equal to target S.


转移方程：j+nums[i]和j-nums[i]表示对nums[i]可以执行加，还可以执行减，那么dp[i][j]的结果值就是加/减之后对应位置的和。
dp[i][j] = dp[i-1][j+nums[i]] + dp[i-1][j-nums[i]]

class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for (int num : nums) sum += num;
        if (S > sum || (sum + S) % 2 != 0)  return 0;
        int length = nums.length;
        //将数组添加正负号后可能的所有取值扩充为-sum ~ sum，总共2*sum+1个数
        int t = sum * 2 + 1; //正数，负数，0
        int[][] dp = new int[length][t];
        
        //如果nums[0]==0的话，那么+0和-0都应该算作其操作, 所以是2
        if (nums[0] == 0) dp[0][sum] = 2;
        else { //如果非0，+、-各一种方法
            dp[0][sum + nums[0]] = 1;
            dp[0][sum - nums[0]] = 1;
        }
        
        for (int i = 1; i < length; i++) {
            for (int j = 0; j < t; j++) {
                //是否越界：
                int left = (j - nums[i]) >= 0 ? j - nums[i] : 0;
                int right = (j + nums[i]) < t ? j + nums[i] : 0;
                dp[i][j] = dp[i - 1][left] + dp[i - 1][right];
            }
        }
        return dp[length - 1][sum + S]; //就是图中纵坐标@3
    }
}


class Solution {
    int count = 0;
    
    public int findTargetSumWays(int[] nums, int target) {
        dfs(nums, target, 0, 0);
        return count;
    }
    private void dfs(int[] nums, int target, int index, int sum) {
        if (index == nums.length) {
            if (sum == target) count++;
        } else {
            dfs(nums, target, index + 1, sum + nums[index]);
            dfs(nums, target, index + 1, sum - nums[index]);
        }
    }
}



Implement a trie with insert, search, and startsWith methods.
class Trie {
TrieNode root;
    class TrieNode {
        boolean isEnd = false;
         TrieNode[] next = new TrieNode[26]; // 当前节点的孩子节点
        public void setIsEnd (boolean isEnd) {
            this.isEnd = isEnd;
        }
    }
    public Trie()  {
            root = new TrieNode();  //constructor
    }
        public void insert(String word) {
                char[] chs = word.toCharArray();
        TrieNode node = root;
        for (int i = 0; i < chs.length; i++) {
            int u = chs[i] - 'a';
            // 判断node的子节点集合中是否已经存在了chs[i], 不存在则创建
            if (node.next[u] == null) node.next[u] = new TrieNode();
                 node = node.next[u]; // 继续向下构建
        }
         node.setIsEnd(true); // 当前TrieNode节点是一个字符串的结尾
    }
    
    public boolean search(String word) {
        char[] chs = word.toCharArray();
        TrieNode node = root;
        for (int i = 0; i < chs.length; i++) {
            int u = chs[i] - 'a';
            if (node.next[u] == null) return false;
            node = node.next[u];
        }
        return node.isEnd;
    }
    
    public boolean startsWith(String prefix) {
        char[] chs = prefix.toCharArray();
        TrieNode node = root;
        for (int i = 0; i < chs.length; i++) {
            int u = chs[i] - 'a';
            if (node.next[u] == null) return false;
            node = node.next[u];
        }
       return true;
    }
}

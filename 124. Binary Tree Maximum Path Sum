A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any path.

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

class Solution {
int maxSum = Integer.MIN_VALUE;
public int maxPathSum(TreeNode root) {
        maxGain(root);
        return maxSum;
}
    
private int maxGain(TreeNode node) {
        if (node == null) return 0;
        int leftGain = Math.max(maxGain(node.left), 0);
        int rightGain = Math.max(maxGain(node.right), 0);
        int path = node.val + leftGain + rightGain;
        maxSum = Math.max(maxSum, path);
        // 返回节点的最大贡献值
     return node.val + Math.max(leftGain, rightGain);
}
}

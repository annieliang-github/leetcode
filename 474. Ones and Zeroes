Given an array of binary strings strs and two integers m and n. Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

base case为dp[0][..][..] = 0, dp[..][0][0] = 0。因为如果不使用任何一个字符串，则背包能装的字符串数就为0；如果背包对0，1的容量都为0，它能装的字符串数也为0。

public int findMaxForm(String[] strs, int m, int n) {
        int length = strs.length;
        //dp[i][j][k]: str在[0, i] 能够使用j个0和k个1的字符串的最大数量
        int[][][] dp = new int[length + 1][m + 1][n + 1];
        dp[0][0][0] = 0;
        for (int i = 1; i <= length; i++) {
            int[] count = count01(strs[i - 1]); //有1位偏移
            for (int j = 0; j <= m; j++) {
                for (int k = 0; k <= n; k++) {
                    int zero = count[0];
                    int one = count[1];
                    if (j >= zero && k >= one) { //如果还有富裕的0、1可选
             dp[i][j][k] = Math.max(dp[i-1][j][k], dp[i-1][j-zero][k-one]+1);
                    } else {  //不选择当前str，至少是上一行答案    
                        dp[i][j][k] = dp[i - 1][j][k]; 
}
                }
            }
        }
        return dp[length][m][n];
}
private int[] count01(String str) {
        int[] count = new int[2];
        for (char c : str.toCharArray()) {
            count[c - '0']++; //'0'-'0'= 0,'1'-'0' = 1
        }
        return count;
    }
} 

用二维数组优化 pseudo code：
for (int i = 1; i <= length; i++) 
int[] count = count01(strs[i - 1]);
          for (int j = m; j >= 0; j--)   -> 需从后往前遍历
for (int k = n; k >= 0; k--) 
                       dp[j][k] = dp[j][k]; //不加该string
                       dp[j][k] = Math.max(dp[j][k], dp[j - count[0]][k - count[1]] +1);
               
return dp[m][n];
时间复杂度：O(mnl)，其中 lll 是字符串的个数。空间复杂度：O(mn)

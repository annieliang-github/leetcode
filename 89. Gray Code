An n-bit gray code sequence is a sequence of 2n integers where:

Every integer is in the inclusive range [0, 2n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and the binary representation of the first and last integers differs by exactly one bit.

Given an integer n, return any valid n-bit gray code sequence.
Input: n = 2        Output: [0,1,3,2]

The binary representation of [0,1,3,2] is [00,01,11,10].
[0,2,3,1] is also a valid gray code sequence, whose representation is [00,10,11,01].

    设 n 阶格雷码集合为 G(n)，则 G(n+1)G 阶格雷码为：
        给 G(n) 阶格雷码每个元素二进制形式前面添加 0，得到 G′(n)；
        设 G(n) 集合镜像为 R(n)，给 R(n) 每个元素二进制形式前面添加 1，得到 R′(n)；
        G(n+1) = G′(n) ∪ R′(n) 拼接两个集合即可得到下一阶格雷码。

代码解析：
        
由于最高位前默认为 0，因此 G′(n) = G(n)，只需在 res后添加 R′(n) 即可；
计算 R′(n)：执行 head = 1 << i ⇒ 1向左移动i位，相当于在最前面加1，以给 R(n) 前添加 1 得到对应 R′(n)；
倒序遍历 res (即 G(n))：依次求得 R′(n) 各元素添加至 res 尾端。

之前的解直接照搬过来，然后倒序把每个数加上 1 << ( n - 1) 添加到结果中即可

public List<Integer> grayCode(int n) {
        List<Integer> ans = new ArrayList<>();
        ans.add(0); // base case n = 0
        for (int i = 0; i < n; i++) {
            int add = 1 << i; // shifting i to the left by 1 bit
            //倒序遍历，并且加上一个值添加到结果中
            for (int j = ans.size() - 1; j >= 0; j--) {
                    ans.add(ans.get(j) + add);
            }
        }
        return ans;
}


时间复杂度：O(2^n)，因为有这么多的结果。空间复杂度：O（1）。

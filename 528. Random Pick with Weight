You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).

We need to call the function pickIndex() which randomly returns an integer in the range [0, w.length - 1]. pickIndex() should return the integer proportional to its weight in the w array. For example, for w = [1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.25 (i.e 25%) while the probability of picking the index 1 is 3 / (1 + 3) = 0.75 (i.e 75%).

More formally, the probability of picking index i is w[i] / sum(w).

 

Example 1:

Input
["Solution","pickIndex"]
[[[1]],[]]
Output
[null,0]

Explanation
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.


class Solution {
    TreeMap<Integer, Integer> map = new TreeMap<>(); //用treeMap因为需要调用lastKey
    //e.g.[1,3]相当于 0 1 1 1
    public Solution(int[] w) {
        map.put(w[0], 0); //放入第一个元素w[0]和其index 0
        for (int i = 1; i < w.length; i++) {
            w[i] += w[i - 1]; //前缀和
            map.put(w[i], i); //放入前缀和和其index
        }
    }
    
    public int pickIndex() {
        Random rand = new Random();
        int target = rand.nextInt(map.lastKey());
        // return a key-value mapping associated with the least key strictly greater than the given key
        return map.higherEntry(target).getValue();
    }
}

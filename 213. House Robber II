All houses at this place are arranged in a circle. 

class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];

        //分为不偷第一个房子 和 不偷最后一个房子 两种情况
        return Math.max(helper(Arrays.copyOfRange(nums, 0, nums.length - 1)), 
   helper(Arrays.copyOfRange(nums, 1, nums.length)));
    }
    private int helper(int[] nums) {
        int prev = 0, curr = 0, temp;
        for (int num : nums) {
            //dp[i + 1] = Math.max(dp[i], dp[i - 1] + num);
            temp = Math.max(curr, prev + num);
            prev = curr;
            curr = temp;
        }
        return curr;
    }
}

class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0], nums[1]);
        int n = nums.length - 1;
        int[] dp1 = new int[n + 1];
        int[] dp2 = new int[n + 1];

        dp1[0] = 0; //首位为0
        dp1[1] = nums[0]; //index 1 为nums的第一位
        for (int i = 1; i < nums.length - 1; i++) { //rob 第一家
            dp1[i + 1] = Math.max(dp1[i], dp1[i - 1] + nums[i]);
        }

        dp2[0] = 0; 
        dp2[1] = nums[1];
        for (int i = 1; i < nums.length - 1; i++) { //rob 最后一家
            dp2[i + 1] = Math.max(dp2[i], dp2[i - 1] + nums[i + 1]);
        }
            return Math.max(dp1[n], dp2[n]);
    }
}

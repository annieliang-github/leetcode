Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. 
方法一：DFS 时间复杂度O(n),空间复杂度O(n)

// Encodes a tree to a single string.
public String serialize(TreeNode root) {
        if (root == null) return "null"; // 递归的中止条件：如果节点为空，返回”null“
        //根节点值 + "," + 左子节点值(进入递归) + "," + 右子节点值(进入递归)
        return root.val + "," + serialize(root.left) + "," + serialize(root.right);
}

// Decodes your encoded data to tree.
public TreeNode deserialize(String data) {
        Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(",")));
        return dfs(queue);
}
    
private TreeNode dfs(Queue<String> queue) {
        String str = queue.poll();
        if (str.equals("null")) return null; //如果到底层了
        TreeNode root = new TreeNode(Integer.parseInt(str)); //以当前为root的子树
        //其左子节点为队列的下一个元素，进入递归; 右子节点为队列的下下个元素
        root.left = dfs(queue); //已经poll出root以后的左子树
        root.right = dfs(queue);
        return root;
}




方法二：BFS 时间复杂度O(n),空间复杂度O(n) 
// Encodes a tree to a single string.
public String serialize(TreeNode root) {
        if (root == null) return "";
        StringBuilder sb = new StringBuilder();
        sb.append("["); //左半个中括号
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {            
            TreeNode node = queue.poll();
            if (node != null) {
                sb.append("" + node.val); // 转成String
                queue.offer(node.left); // 此题不用判断如果非null再offer
                queue.offer(node.right);
            } else sb.append("null");
            sb.append(","); //最后会多一个逗号，但是没关系deserialize的时候唯一解
        }
        sb.append("]");
        return sb.toString();
}

// Decodes your encoded string to tree.
public TreeNode deserialize(String data) {
        if (data == "") return null;
        // 去掉前后的中括号，然后split逗号
        String[] array = data.substring(1, data.length() - 1).split(",");
        TreeNode root = new TreeNode(Integer.parseInt(array[0])); //第一个数是root
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int index = 1; //root的index为1
        while (!queue.isEmpty()) {
            TreeNode node = queue.poll();
            if (!array[index].equals("null")) { // 不为null的话，入队
                node.left = new TreeNode(Integer.parseInt(array[index]));
                queue.offer(node.left);
            }
            index++;
            if (!array[index].equals("null")) { // 不为null的话，入队
                node.right = new TreeNode(Integer.parseInt(array[index]));
                queue.offer(node.right);
            }
            index++;
        }
        return root;
}                




You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.
Given a set of pairs, find the length longest chain which can be formed. 
class Solution { //greedy算法：时间复杂度O(nlogn) 空间O(n)
    public int findLongestChain(int[][] pairs) {
        // 对于 (a, b) 和 (c, d) ，如果 b < c，则它们可以构成一条链
        if (pairs.length == 1) return 1;
        Arrays.sort(pairs, (a, b) -> a[1] - b[1]); //按照第二位从小到大排列
        int chainTail = pairs[0][1]; //最小的第二位
        int ans = 1;
        for (int i = 1; i < pairs.length; i++) {
            if (pairs[i][0] > chainTail) { //是否pair的第一位大于tail：c > b
                chainTail = pairs[i][1]; //一点点往后加
                ans++;
            }
        }
        return ans;
    }
}

public int findLongestChain(int[][] pairs) { //dp算法：时间复杂度O(n^2)
        Arrays.sort(pairs, (a, b) -> a[0] - b[0]); //按照第一位从小到大
        int length = pairs.length;
        //在一个长度为 k，以 pairs[i] 结尾的数对链中
        //如果 pairs[i][1] < pairs[j][0]，则将该数对加入链中，数对链长度变为 k+1
        
        //dp[i] 存储以 pairs[i] 结尾的最长链的长度
        int[] dp = new int[length];
        Arrays.fill(dp, 1); //每一个都先initiate为1
        
        //当 i < j 且 pairs[i][1] < pairs[j][0] 时，更新 dp[j] = max(dp[j], dp[i] + 1)
        for (int j = 1; j < length; j++) { //右边的
            for (int i = 0; i < j; i++) { //左边的
                if (pairs[i][1] < pairs[j][0]) {
                    dp[j] = Math.max(dp[j], dp[i] + 1);
                }
            }
        }
        int ans = 0;
        for (int x : dp) ans = Math.max(ans, x);
        return ans;
}

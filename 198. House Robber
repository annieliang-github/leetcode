Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police (two adjacent houses being broken into on the same night).
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.

class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        int[] dp = new int[nums.length + 1]; //dp的length通常为nums.length + 1
        dp[0] = 0; //首位为0
        dp[1] = nums[0]; //index 1 为nums的第一位
        for (int i = 1; i < nums.length; i++) { //loop through nums
// dp数组的i+1是 （currMax，prevMax + currElem）取最大值
            dp[i + 1] = Math.max(dp[i], dp[i - 1] + nums[i]);
        }
            return dp[nums.length]; // return最后一位
    }
}
以上动态规划时间复杂度O(n) 空间复杂度O(n）空间想要简化成O(1)，使用滚动数组：

public int rob(int[] nums) {
    int prev = 0;
    int curr = 0;

    // 每次循环，计算“偷到当前房子为止的最大金额”
    for (int i : nums) {
        // 循环开始时，curr 表示 dp[i]，prev 表示 dp[i - 1]
        // dp[i + 1] = Math.max(curr, prev + i) 
        int temp = Math.max(curr, prev + i);
        prev = curr;
        curr = temp;
        }
    // 循环结束时，curr 表示 dp[i]，prev 表示 dp[i - 1]
    return curr;
}

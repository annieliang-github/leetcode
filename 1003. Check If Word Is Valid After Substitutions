A string s is valid if, starting with an empty string t = "", you can transform t into s after performing the following operation any number of times: Insert string "abc" into any position in t. Return true if s is valid, otherwise, return false.
Input: s = "aabcbc"    Output: true："" -> "abc" -> "aabcbc" Thus, "aabcbc" is valid.

方法一：stack，时间复杂度O(n)，空间复杂度O(n)
public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == 'a') stack.push(c);
            else if (c == 'b') { // 看看前面stack里还有没有字符
                if (stack.isEmpty()) return false;
                else stack.push(c); // 如果不空就直接入栈（前面是 b 或 a）
            } else { // 遇到c要先检查个数，再检查前两个是否a,b
                if (stack.size() < 2) return false;
                else {
                          if (stack.pop() != 'b' || stack.pop() != 'a') 
                             return false;
                }
            }
        }
        return stack.isEmpty(); // 检查栈空了没，没空就说明剩下了某个 a 或者 ab
}

但是比较慢，所以直接用方法二，在原s.tocharArray里，使用相同逻辑用index记录长度
public boolean isValid(String s) {
        char[] array = s.toCharArray();
        int index = 0;
        for (char c : array) {
            if (c != 'c') {
                array[index] = c;
                index++;
            } else {
                if (index == 0 || array[index - 1] != 'b') return false;
                index--;
                if (index == 0 || array[index - 1] != 'a') return false;
                index--;
            }
        }
        return index == 0;
}


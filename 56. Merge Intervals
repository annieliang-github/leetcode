Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length == 0) return new int[0][2];
        List<int[]> ans = new ArrayList<>();
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]); //按照左端点升序排序
        /*也可写作：
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] interval1, int[] interval2) {
                return interval1[0] - interval2[0];
            }
        });
        */
        
        for (int i = 0; i < intervals.length; i++) {
            int left = intervals[i][0];
            int right = intervals[i][1];
            //将第一个区间加入ans中
//如果当前区间的left在ans中最后一个区间的right之后，不会重合，可以加入
            if (ans.size() == 0 || ans.get(ans.size() - 1)[1] < left) {
                    ans.add(new int[] {left, right});
            } else { //否则重合
//用当前区间的右端点更新ans中最后一个区间的right，将其置为二者的较大值
                ans.get(ans.size()-1)[1] = Math.max(ans.get(ans.size()-1)[1], right);
            }
        }
        return ans.toArray(new int[ans.size()][]);
}

时间复杂度：O(nlogn) for sorting
空间复杂度：O(log⁡N)(orO(n))
其中 n 为区间的数量。这里计算的是存储答案之外，使用的额外空间。O(log⁡n) 即为排序所需要的空间复杂度

Given the root of a binary tree, return all root-to-leaf paths in any order.

Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

helper function, 需要参数root和String path，如果为null，直接return。先把当前root的value值加在string path上。如果已经到leaf了（也就是左右孩子都null）就把path加入ans。
如果不为null就递归左右孩子。

class Solution {
    List<String> ans = new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        if (root == null) return ans;
        dfs(root, "");
        return ans;
    }
    private void dfs(TreeNode root, String path) {
        if (root == null) return;
        path += root.val;
        if (root.left == null && root.right == null)
            ans.add(path);
        if (root.left != null)
            dfs(root.left, path + "->");
        if (root.right != null)
            dfs(root.right, path + "->");
    }
}

时间复杂度O(n) 因为每个node都遍历一遍，空间复杂度O(n)，最坏情况下递归tree高度是O(n)

Given an array of integers arr, sort the array by performing a series of pancake flips. In one pancake flip we do the following steps:
Choose an integer k where 1 <= k <= arr.length.
Reverse the sub-array arr[0...k-1] (0-indexed).
Input: arr = [3,2,4,1]  Output: [4,2,4,3]
After 1st flip (k = 4): arr = [1, 4, 2, 3]
After 2nd flip (k = 2): arr = [4, 1, 2, 3]
After 3rd flip (k = 4): arr = [3, 2, 1, 4]
After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.

Class Solution {
List<Integer> ans = new ArrayList<>();
public List<Integer> pancakeSort(int[] arr) {
        int n = arr.length;
        sort(arr, n);
        return ans;
}
    
private void sort(int[] arr, int n) {
        if (n == 1) return; //base case, 1或0个element时不用sort
        int maxVal = 0, maxIndex = 0;
        for (int i = 0; i < n; i++) { //找到最大的元素和对应idx
            if (arr[i] > maxVal) {
                maxVal = arr[i];
                maxIndex = i;
            }
        }
        reverse(arr, 0, maxIndex); //先把最大的数放到最前面
        ans.add(maxIndex + 1); //因为k是1-indexed
        reverse(arr, 0, n - 1); //再把最大的放到最后；
        ans.add(n);
        sort(arr, n - 1); //递归 反转剩余n - 1个
}
    
private void reverse(int[] arr, int start, int end) {
        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--; //继续下一轮swap
    }
}
}

时间复杂度：O(n^2)。空间复杂度：O(n)。

A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.
Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.

public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> set = new HashSet<>(wordList);
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord); //queue里放单词
        int count = 0; // 需要多少步也就是遍历了多少个level，每个level改一个字母
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String curr = queue.poll(); //当前的单词
                char[] array = curr.toCharArray();
                if (curr.equals(endWord)) return count + 1; //找到了
                for (int j = 0; j < curr.length(); j++) {
                    char temp = array[j]; // hit要分别loop三个字母，先存入temp
                    for (char c = 'a'; c <= 'z'; c++) { //从a试到z看哪个单词在
                        array[j] = c;
                        String newWord = new String(array); //替换1个字母
                        if (set.contains(newWord)) {
                            queue.add(newWord);
                            set.remove(newWord);
                        }
                    }
                    array[j] = temp; //因为j要向下loop别的字母，还原单词
                }
            }
            count++;
        }
        return 0;
}

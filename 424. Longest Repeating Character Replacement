You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

use sliding window:
1. create char[] count, left = 0
2. for (right = 0 to len):
    c = charAt(right)
    maxCount = max(maxCount, count[c - 'A'])
    if (right-left+1 - maxCount > k) shrink window
    update ans with the current window size
    
    
time O(n), space O(26) = O(1)
    
    
class Solution {
    public int characterReplacement(String s, int k) {
        int[] count = new int[26];
        int maxCount = 0, left = 0, ans = 0;
        int len = s.length();
        for (int right = 0; right < len; right++) {
            char c = s.charAt(right);
            count[c - 'A']++;
            // getting the max frequency of any char within this window
            maxCount = Math.max(maxCount, count[c - 'A']); // compare and get the maxCount for the previous, and count for this char
            // we can replace at most k times, so if the gap is more than k, then we need to shrink the window
            if (right - left + 1 - maxCount > k) {
                count[s.charAt(left) - 'A']--; // update the count first, then move left 
                left++;
            }
            // update answer with current window size
            ans = Math.max(ans, right - left + 1);
        }
        return ans;
    }
}


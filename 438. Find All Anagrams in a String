Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ans = new ArrayList<>();
        int[] need = new int[26];
        for (int i = 0; i < p.length(); i++) {
            need[p.charAt(i) - 'a']++;
        }
        
        int start = 0, end = -1;
        while (start < s.length()) {
            // 还有剩余元素未考察，且窗口内字符串长度小于字符串p的长度,则扩大窗口右侧边界
            if (end < s.length() - 1 && end - start + 1 < p.length()) {
                end++;
            } else {
                start++; //右侧边界不能继续扩大或窗口内字符串长度等于字符串p的长度,则缩小左侧边界
            }
            
            if (end - start + 1 == p.length() && isAnagram(s.substring(start, end + 1), need)) {
                ans.add(start);
            }
        }
        return ans;
    }
    
    private boolean isAnagram(String window, int[] need) {
        // 计算窗口内字符串各元素的出现次数
        int[] windowFreq = new int[26];
        for (int i = 0; i < window.length(); i++) {
            windowFreq[window.charAt(i) - 'a']++;
        }
        // 比较窗口内各元素的出现次数和字符串p中各元素的出现次数是否一样
        for (int j = 0; j < 26; j++) {
            if (windowFreq[j] != need[j]) return false;
        }
        return true;
    }
}


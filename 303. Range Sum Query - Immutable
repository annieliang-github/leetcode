Given an integer array nums, find the sum of the elements between indices left and right inclusive, where (left <= right). Implement the NumArray class.
class NumArray {
    
    //假设数组 sum，sum[i] 表示从第一个元素到第i个元素 （下标为i - 1）的总和
    //sum[j + 1] 表示从第一个元素到第j + 1个元素 （下标为j）的总和
    //求i - j 总和只需要 sum[j + 1] - sum[i] 即可

    int[] sum;

    public NumArray(int[] nums) {
        int n = nums.length;
        sum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
    }
    
    public int sumRange(int left, int right) {
            return sum[right + 1] - sum[left];
    }
}
时间复杂度：初始化 O(n)，每次检索 O(1)，空间复杂度：O(n), 创建n+1的前缀和数组

前缀和总结：
通过前缀和数组保存前 n 位的和，presum[1]保存的就是 nums 数组中前 1 位的和，也就是 presum[1] = nums[0]。注意：presum的数组要设置成n+1，目的是为了方便计算 sumRange(i,j)，不需要对 i=0 的情况特殊处理




for (int i = 0; i < nums.length; i++) {
      presum[i+1] = nums[i] + presum[i];
}

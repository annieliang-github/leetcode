You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

class Solution {
    public int coinChange(int[] coins, int amount) {
        int dp[] = new int[amount + 1];
        //initially all 0s, fill it all with #bigger than amount first
        //dp[i] the minimum coins needed
        Arrays.fill(dp, amount + 1);
        dp[0] = 0; //首位设置为0
        
        //e.g i = 4, coin = 2 dp[4] = dp[4-2] + 1 = 1 + 1 = 2
        //iterate each type of coin to see whether we can use, update dp[i]
        for (int i = 1; i <= amount; i++) {
            for (int coin : coins) {
                if (i < coin) continue; //必须要大于等于coin的面值才可以
                dp[i] = Math.min(dp[i - coin] + 1, dp[i]);
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}


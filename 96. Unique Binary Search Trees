Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.
 

Input: n = 3
Output: 5


class Solution {
    public int numTrees(int n) {
               //root为1，左边有dp(0)种情况，右边 dp(2) 种情况，共 dp(0)*dp(2) 种情况
        //root为2，左边有dp(1)种情况，右边 dp(1) 种情况，共 dp(1)*dp(1) 种情况
        //root为3，左边有dp(2)种情况，右边 dp(0) 种情况，共 dp(2)*dp(0) 种情况
        //dp(3) = dp(0)*dp(2) + dp(1)*dp(1) + dp(2)*dp(0)

        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        //根节点用掉一个数，剩下i-1个，dp[j]用掉j个，只剩下i-j-1个
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j <= i - 1; j++) {
                dp[i] += dp[j] * dp[i - j - 1];
            }
        }
        return dp[n];
    }
}

时间复杂度O(n^2)，n为BST节点的个数，共n个subproblem，每个需要O(n) 所以total O（n^2）
空间复杂度O(n)

如果直接递归会超时：选任意一个数作为根节点i(i∈[1,n])，那么由于二叉搜索树的特性，左子树只能用1...i-1构建，右子树只能用i+1...n构建。

class Solution {
    public int numTrees(int n) {
        if (n == 0 || n == 1) return 1;
          int ans = 0;
        for (int i = 1; i <= n; i++) ans += numTrees(i - 1) * numTrees(n - i);
        return ans;
    }
}

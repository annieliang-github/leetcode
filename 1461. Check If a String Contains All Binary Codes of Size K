Given a binary string s and an integer k. Return True if every binary code of length k is a substring of s. Otherwise, return False.

Input: s = "00110110", k = 2
Output: true

Explanation: The binary codes of length 2 are "00", "01", "10" and "11". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.

class Solution {
    public boolean hasAllCodes(String s, int k) {
        Set<String> set = new HashSet<>();
        for (int i = 0; i <= s.length() - k; i++) {
            set.add(s.substring(i, i + k));
        }
        return set.size() == (int) Math.pow(2, k);
    }
}

时间复杂度：O(k * |s|)，其中∣s∣是字符串的长度。将长度为k的字符串加入哈希集合的时间复杂度为 O(k)，即为计算哈希值的时间。

空间复杂度：O(k∗2^k)。哈希集合中最多有 2^k项，每一项是一个长度为 k 的字符串

You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).

class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) return 0;
        int length = prices.length;
        // dp[i][0]: 手上持有股票的最大收益
        // dp[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益
        // dp[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益
        int[][] dp = new int[length][3];
        dp[0][0] = -prices[0]; //第一天买入股票，花费prices[0]
        
        for (int i = 1; i < length; i++) {

   //第i天持有股票，可能是i-1天已经持有没动（dp[i-1][0]）
   //可能当天买入，则i-1天不能持有该股票，且不在冷冻期（dp[i-1][2]）再减去花费
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i]);

   //第i天结束处于冷冻期，因为当天卖出了股票，说明i-1天持股，再加卖出去的利润
            dp[i][1] = dp[i - 1][0] + prices[i];

   //第i天没有股票，且没有冷冻期，说明当天没有任何操作，与i-1天一样
   //第i-1天不持有股票，分两种情况：i-1天是否处在冷冻期
            dp[i][2] = Math.max(dp[i - 1][1], dp[i - 1][2]);
        }
        //因为最后一天要把股票卖出所以不考虑[0]
        return Math.max(dp[length - 1][1], dp[length - 1][2]);
    }
}

空间优化：
        int dp0 = -prices[0];
        int dp1 = 0;
        int dp2 = 0;
        for (int i = 1; i < length; ++i) {
            int newdp0 = Math.max(dp0, dp2 - prices[i]);
            int newdp1 = dp0 + prices[i];
            int newdp2 = Math.max(dp1, dp2);
            dp0 = newdp0;
            dp1 = newdp1;
            dp2 = newdp2;
        }
        return Math.max(dp1, dp2);

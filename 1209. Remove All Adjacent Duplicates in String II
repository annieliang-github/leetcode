We repeatedly make k duplicate removals on s until we no longer can.
public String removeDuplicates(String s, int k) {
        StringBuilder sb = new StringBuilder(s);
        Stack<Integer> counts = new Stack<>();
        for (int i = 0; i < sb.length(); i++) {
            if (i == 0 || sb.charAt(i) != sb.charAt(i - 1)) {
                    counts.push(1); //如果当前字符与前一个不同，栈中push 1
            } else {
                int incremented = counts.pop() + 1;
                if (incremented == k) { //如果栈顶元素等于 k
                    sb.delete(i - k + 1, i + 1); //则从字符串中删除这 k 个字符
                    i = i - k; // 重置pointer i
                } else { //如果当前字符与前一个相同，栈顶元素加 1
                    counts.push(incremented);
                }
            }
        }
        return sb.toString();
}

Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
方法一：递归：时间复杂度O(n), 空间复杂度O(n)

设计一个递归函数 helper(root, lower, upper) 来递归判断，函数表示考虑以 root 为根的子树，判断子树中所有节点的值是否都在 (l,r) 的范围内（注意是开区间）。

在递归调用左子树时，我们需要把上界 upper 改为 root.val，即调用 helper(root.left, lower, root.val)，因为左子树里所有节点的值均小于它的根节点的值。同理递归调用右子树时，我们需要把下界 lower 改为 root.val，即调用 helper(root.right, root.val, upper)。

class Solution {
    public boolean isValidBST(TreeNode root) {
            return isValid(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    private boolean isValid(TreeNode root, long min, long max) {
        if (root == null) return true;
        //二叉树的元素都是唯一的，不会出现等于
        if (root.val <= min || root.val >= max) return false;
        return isValid(root.left, min, root.val) && 
 isValid(root.right, root.val, max);
    }
}
方法二：中序遍历，得到的结果应该是有序数组。放入stack中，如果pop出来的
    long pre = Long.MIN_VALUE;
    public boolean isValidBST(TreeNode root) {
        if (root == null) return true;
        if (!isValidBST(root.left)) return false;
        if (root.val <= pre) return false; // 如果当前节点<=中序遍历的前一个节点
        pre = root.val;
        return isValidBST(root.right);
}

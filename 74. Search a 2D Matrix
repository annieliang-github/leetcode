Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

方法一：从右上角开始，boundary之内，如果matrix[row][col] < target，往下走，row++
时间复杂度O(m+n)

public boolean searchMatrix(int[][] matrix, int target) {

        if (matrix == null||matrix.length == 0||matrix[0].length == 0) return false; 
        int m = matrix.length, n = matrix[0].length;      
        int row = 0, col = n - 1;
        while (row < m && col >= 0) {
            if (matrix[row][col] == target) return true;
            if (matrix[row][col] < target) row++;
            else col--;
        }
        return false;
}                    

方法二：把a + 1行的头部连接到a行的末尾，那么我们可以得到一行递增的数值。可行的原因是每一行开头的数值比上一行末尾的大。时间复杂度O（logmn）

public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length, n = matrix[0].length; // 得到矩阵行和列
        int left = 0, right = m * n - 1; // 左边位置和右边位置
        while (left <= right) {
            int mid = (right - left) / 2 + left; 
            int x = matrix[mid / n][mid % n]; // 矩阵位置和除法运算与取模运算
            if (x < target) left = mid + 1;
            else if (x > target) right = mid - 1;
            else return true;
        }
        return false;
}

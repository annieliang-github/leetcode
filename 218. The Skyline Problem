A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.
The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:
lefti is the x coordinate of the left edge of the ith building.
righti is the x coordinate of the right edge of the ith building.
heighti is the height of the ith building.
You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.
The skyline should be represented as a list of "key points" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.
Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]

Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
Explanation:
Figure A shows the buildings of the input.
Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.


只考虑每个 building 的左上角和右上角坐标，将所有点按 x 坐标排序，然后开始遍历。

需要一个优先队列来存储遍历坐标的高度，也就是 y 轴坐标。

对于左上角坐标和右上角坐标有不同的处理方式。

遇到左上角坐标，将其 y 坐标加入到优先队列中。

遇到右上角坐标，将其 y 坐标从优先队列中删除，也就是删除了其对应的左上角坐标的 y 值。

最后判断优先队列中的最高高度相对于之前是否更新，如果更新了的话，就将当前的 x 以及更新后的最高高度作为一个坐标加入到最终结果中。

buildings  [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8]
根据 buildings 求出每个 building 的左上角和右上角坐标
将所有坐标按照 x 排序, 并标记当前坐标是左上角坐标还是右上角坐标
l(2,10) l(3,15) l(5,12) r(7,15) r(9,10) r(12,12)
l(15,10) l(19,8) r(20,10) r(24,8)
PriorityQueue = {0}, preMax = 0

l(2,10) 将 10 加入优先队列
preMax = 0, PriorityQueue  = {0 10}
当前 PriorityQueue 的 max = 10, 相对于 preMax 更新了
将 (2,10) 加入到 res, res = {(2,10)}
更新 preMax = 10
    
l(3,15) 将 15 加入优先队列
preMax = 10, PriorityQueue  = {0 10 15}
当前 PriorityQueue 的 max = 15, 相对于 preMax 更新了
将 (3,15) 加入到 res, res = {(2,10) (3,15)}
更新 preMax = 15    
    
l(5,12) 将 12 加入优先队列
preMax = 15, PriorityQueue  = {0 10 15 12}
当前 PriorityQueue 的 max = 15, 相对于 preMax 没有更新
res 不变

r(7,15) , 遇到右上角坐标, 将 15 从优先队列删除
preMax = 15, PriorityQueue  = {0 10 12}
当前 PriorityQueue 的 max = 12, 相对于 preMax 更新了
将 (7,max) 即 (7,12) 加入到 res, res = {(2,10) (3,15) (7,12)}
更新 preMax = 12
    
r(9,10) , 遇到右上角坐标, 将 10 从优先队列删除
preMax = 12, PriorityQueue  = {0 12}
当前 PriorityQueue 的 max = 12, 相对于 preMax 没有更新
res 不变

r(12,12) , 遇到右上角坐标, 将 12 从优先队列删除
preMax = 12, PriorityQueue  = {0}
当前 PriorityQueue 的 max = 0, 相对于 preMax 更新了
将 (12,max) 即 (7,0) 加入到 res, res = {(2,10) (3,15) (7,12) (12,0)}
更新 preMax = 0
    
后边的同理，就不进行下去了。

public List<List<Integer>> getSkyline(int[][] buildings) {
        List<List<Integer>> points = new ArrayList<>(); // 记录各个顶点
        List<List<Integer>> ans = new ArrayList<>();
        //buildings = [[2,9,10]...] 其中b[0]是左x坐标 b[1]是右x坐标 b[2]是y坐标
        int n = buildings.length;
        //求出左上角和右上角坐标, 左上角坐标的 y 存负数，以示区分
        for (int[] building : buildings) {
            // 左x和左y，其中左y为负
            List<Integer> p1 = new ArrayList<>();
            p1.add(building[0]);
            p1.add(-building[2]);
            points.add(p1);
            // 右x和右y，其中右y为正
            List<Integer> p2 = new ArrayList<>();
            p2.add(building[1]);
            p2.add(building[2]);
            points.add(p2);
        }
              
        //考虑两个坐标比较的时候，x 坐标相等会有三种情况。
        //当两个坐标都是左上角坐标，我们要将高度高的排在前边
        //当两个坐标都是右上角坐标，我们要将高度低的排在前边
        //当两个坐标一个是左上角坐标，一个是右上角坐标，我们需要将左上角坐标排在前边

        // 将所有点按 x 坐标排序，如果x相等，
        Collections.sort(points, new Comparator<List<Integer>>() {
            public int compare(List<Integer> p1, List<Integer> p2) {
                int x1 = p1.get(0);
                int y1 = p1.get(1);
                int x2 = p2.get(0);
                int y2 = p2.get(1);
                
                if (x1 != x2) return x1 - x2; // 如果不相等，从小到大排列
//1：都是左y，高的在前，因为是负数所以小的在前 
//2：都是右y，低的在前，都是y1 - y2
                else return y1 - y2; // 如果相等，
            }
        });
        
        PriorityQueue<Integer> queue = new PriorityQueue<>((a, b) -> b - a); //maxHeap
        queue.offer(0);
        int pre = 0; //记录之前出现的最大值
        
        for (List<Integer> p : points) {
            int x = p.get(0);
            int y = p.get(1);
            //遇到左上角坐标，将其 y 坐标加入到优先队列中
            //遇到右上角坐标，将其 y 坐标从优先队列中删除
        //也就是删除了其对应的左上角坐标的 y 值
            if (y < 0) queue.offer(-y);
            else queue.remove(y);
        
            int currMax = queue.peek();
            if (currMax != pre) { //最大值更新了, 将当前结果加入
                List<Integer> temp = new ArrayList<>();
                temp.add(x);
                temp.add(currMax);
                ans.add(temp);
                pre = currMax;
            }
        }
        return ans;
}

145. Binary Tree Postorder Traversal

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        dfs(root, list); //不再需要判断是否root==null因为dfs里面已经写了
        return list;
    }
    private void dfs(TreeNode root, List<Integer> list) {
        if (root == null) return; //如果root == null直接return
        dfs(root.left, list);
        dfs(root.right, list);
        list.add(root.val); //最后访问根节点
    }
}

前序遍历为 root -> left -> right，后序遍历为 left -> right -> root。可以修改前序遍历成为 root -> right -> left，那么这个顺序就和后序遍历正好相反，return前reverse一下。

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) return list;
            
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()) {
TreeNode node = stack.pop();
list.add(node.val);
if (node.left != null) stack.push(node.left);
            if (node.right != null) stack.push(node.right); 
        }
        Collections.reverse(list);
        return list;
    }
}

iterative要用STACK！！！
时间复杂度：O(n)，其中n是二叉树的节点数。空间复杂度：O(n)，为递归过程中栈的开销，平均情况下为 O(log⁡n)，最坏情况下树呈现链状，为 O(n)

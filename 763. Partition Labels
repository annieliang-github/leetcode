A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.
Input: S = "ababcbacadefegdehijhklij" Output: [9,7,8]
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.

class Solution {
    public List<Integer> partitionLabels(String S) {
        int[] map = new int[26];
        Arrays.fill(map, -1);
        for (int i = 0; i < S.length(); i++) {
            //相当于map[S[i]] = i, 但是S[i]是字母，所以要转换成idx
            map[S.charAt(i) - 'a'] = i; // 存放字母与它的最远位置
        }
        
        int start = 0, max = 0; // 已扫描的字符中最远的位置
        List<Integer> res = new ArrayList<>();
        
        for (int i = 0; i < S.length(); i++) {
            int currPos = map[S.charAt(i) - 'a']; // 当前扫描的字符的最远位置
            max = Math.max(currPos, max); //更新「已扫描的字符中最远的位置」
            if (i == max) { //正好扫描到「已扫描的字符的最远位置」，到达切割点
                //当前片段访问结束，下标范围是 [start,max]，长度为 max−start+1
                res.add(i - start + 1);
                start = i + 1; // 更新，下一个待切割的字符串的起始位置
            }
        }
        return res;
    }
}

时间复杂度：O(n)，需要遍历两次，第一次记录每个字母最后一次出现的下标位置，第二次进行字符串的划分。空间复杂度：O(∣Σ∣)，其中 Σ 是字符串中的字符集。这道题只包含小写字母，∣Σ∣=26|。

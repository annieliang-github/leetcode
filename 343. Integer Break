Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers. Return the maximum product you can get.

当 n≥2 时，可以拆分成至少两个正整数的和
将 i 拆分成 j 和 i−j 的和，且 i−j 不再拆分，乘积：j×(i−j)j
将 ii 拆分成 j 和 i−j 的和，且 i−j 继续拆分，乘积 j×dp[i−j]

public int integerBreak(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 0; //0不是正整数，1是最小的正整数，都不能拆分
        dp[1] = 0;
        for (int i = 2; i <= n; i++) {
            int curMax = 0;
            for (int j = 1; j < i; j++) {
                    curMax = Math.max(curMax, Math.max(j * (i - j), j * dp[i - j]));
            }
            dp[i] = curMax;
        }
        return dp[n];
}            时间复杂度O(n^2）

public int integerBreak(int n) { //dp优化：时间复杂度降到O(n)
        if (n < 4) {
            return n - 1;
        }
        int[] dp = new int[n + 1];
        dp[2] = 1;
        for (int i = 3; i <= n; i++) {
            dp[i] = Math.max(Math.max(2 * (i - 2), 2 * dp[i - 2]), 
Math.max(3 * (i - 3), 3 * dp[i - 3]));
        }
        return dp[n];
}

将数字 n 尽可能以因子 3 等分时，乘积最大
最优：3 。把数字 n 可能拆为多个因子 3 ，余数可能为 0,1,2 三种情况
次优：2 。若余数为 2 ；则保留，不再拆为 1+1
最差：1 。若余数为 1 ；则应把一份 3+1 替换为 2+2，因为 2×2>3×1

public int integerBreak(int n) { //数学算法：
        if (n <= 3) return n - 1;
        int a = n / 3, b = n % 3;
        if (b == 0) return (int) Math.pow(3, a); //余数为零，3^a
        if (b == 1) return (int) Math.pow(3, a - 1) * 4; //余数为1，把一个3+1换成2+2
        return (int) Math.pow(3, a) * 2; //余数为2，3^a + 2
}

We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node, we stop. Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.
The directed graph has n nodes with labels from 0 to n - 1, where n is the length of graph. The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph, going from node i to node j.

Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]    Output: [2,4,5,6]

方法一：DFS 时间复杂度O(V+E)，空间复杂度O(V)

白色表示该节点还没有被访问过；灰色表示该节点在栈中（这一轮搜索中被访问过）或者在环中；黑色表示该节点的所有相连的节点都被访问过，且该节点不在环中。

当我们第一次访问一个节点时，我们把它从白色变成灰色，并继续搜索与它相连的节点。如果在搜索过程中我们遇到一个灰色的节点，那么说明找到了一个环，此时退出搜索，所有的灰色节点保持不变（即从任意一个灰色节点开始，都能走到环中），如果搜索过程中，我们没有遇到灰色的节点，那么在回溯到当前节点时，我们把它从灰色变成黑色，即表示它是一个安全的节点。

class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        int[] color = new int[n];
        List<Integer> ans = new ArrayList<>();
        
        for (int i = 0 ; i < n; i++) {
            if (dfs(i, color, graph)) ans.add(i);
        }
        return ans;
    }
    // white: 0, gray: 1 black: 2
    private boolean dfs(int node, int[] color, int[][] graph) {
        // 只要不为0，就说明either在访问中，or访问过，如果黑色ok，灰色不行
        if (color[node] > 0) return color[node] == 2;
        color[node] = 1; //正在访问，设置为灰色
        for (int neighbor : graph[node]) {
            if (color[neighbor] == 2) continue; //遇到黑色的邻居，没事
            // 邻居是灰色的，该轮正在访问，有cycle，或者递归不成功，也不行
            if (color[neighbor] == 1 || !dfs(neighbor, color, graph)) 
return false;
        }
        color[node] = 2; //此时recurse完这个点，可以设置为黑色
        return true;
    }
}

方法二：reverse topological sort，时间复杂度O(V+E)，空间复杂度O(V)

对于一个节点 u，如果我们从 u 开始任意行走能够走到一个环里，那么 u 就不是一个安全的节点。我们将所有的边反向，得到反向图 reverse，随后将 reverse 中所有没有入边的节点加入队列中。每一次我们取出队列中的一个节点 u，将它从图中删除，如果此时某个节点 v 存在从 u 到 v 的一条边，并且在删掉了这条边后，v 变成了没有入边的节点，那么就把 v 加入队列。以此类推，直到队列为空。最后所有加入过队列的节点即为安全的节点。

public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        boolean[] safe = new boolean[n];
        List<Set<Integer>> G = new ArrayList<>();
        List<Set<Integer>> reverse = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>(); 

        for (int i = 0; i < n; i++) { // 先初始化，放入空set
            G.add(new HashSet<>());
            reverse.add(new HashSet<>());
        } 
        for (int i = 0 ; i < n; i++) {
            if (graph[i].length == 0) 
                    queue.offer(i); //如没有从这个点出发的边，说明出度为0，安全
            for (int j : graph[i]) {
                G.get(i).add(j);
                reverse.get(j).add(i);
            }
        }
          while (!queue.isEmpty()) {
            int curr = queue.poll();
            safe[curr] = true;
            for (int neighbor : reverse.get(curr)) {
                G.get(neighbor).remove(curr); // 把这个点移除
        //从邻居中再找出度为0的，入栈
                if (G.get(neighbor).isEmpty()) queue.offer(neighbor); 
            }
        } 
        List<Integer> ans = new ArrayList();
        for (int i = 0; i < n; i++) {
            if (safe[i]) ans.add(i);
        }
        return ans;
}

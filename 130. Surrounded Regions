Given an m x n matrix board containing 'X' and 'O', capture all regions surrounded by 'X'. A region is captured by flipping all 'O's into 'X's in that surrounded region.
class Solution { //DFS解法：时间复杂度O(mn)，空间复杂度O(mn）
    public void solve(char[][] board) {
        if (board == null || board.length == 0) return;
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                boolean isEdge = i==0 || j==0 || i==m-1 || j==n-1;
                // 如果在边界上，且该点为'O', call dfs，从这点开始遍历
                if (isEdge && board[i][j] == 'O') dfs(board, i, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // 遇到为O的，说明可以改成X，遇到为X的，说明与O相接，不能动
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '*') board[i][j] = 'O';
            }
        }
    }
    private void dfs(char[][] board, int i, int j) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) return; 
        if (board[i][j] != 'O') return; //要寻找边界为'O'的字符，所以非‘O’返回
        board[i][j] = '*';
        dfs(board, i - 1, j); //上
        dfs(board, i + 1, j); //下
        dfs(board, i, j - 1); //左
        dfs(board, i, j + 1); //右
    }
}

//解法2：BFS时间复杂度O(mn)，空间复杂度O(mn）。其他与前面一样，但是call BFS
public class Pos{
        int i, j;
        Pos(int i, int j) {
            this.i = i;
            this.j = j;
        }
}
public void bfs(char[][] board, int i, int j) {
        Queue<Pos> queue = new LinkedList<>();
        queue.add(new Pos(i, j));
        board[i][j] = '#'; //先把这个pos mark成#
        while (!queue.isEmpty()) {
            Pos current = queue.poll();
            // 按照上下左右的顺序，为O则mark成#，说明与O相接，一定要用if非else if
            if (current.i - 1 >= 0 && board[current.i - 1][current.j] == 'O') {
                queue.add(new Pos(current.i - 1, current.j));
                board[current.i - 1][current.j] = '#';
                 }
            if (current.i+1< board.length && board[current.i+1][current.j] == 'O') {
                queue.add(new Pos(current.i + 1, current.j));
                board[current.i + 1][current.j] = '#';      
            }
            if (current.j - 1 >= 0 && board[current.i][current.j - 1] == 'O') {
                queue.add(new Pos(current.i, current.j - 1));
                board[current.i][current.j - 1] = '#';
            }
            if (current.j+1<board[0].length && board[current.i][current.j+1]=='O') {
                queue.add(new Pos(current.i, current.j + 1));
                board[current.i][current.j + 1] = '#';
            }
        }
}

Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], return its missing ranges.
Input: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99,
Output: ["2", "4->49", "51->74", "76->99"]

先把range换成exclusive的，比如[0,99] -> (-1, 100)

public List<String> findMissingRanges(int[] nums, int lower, int upper) {
    long l = (long) lower, u = (long) upper; // 先cast防止u+1溢出
    int n = nums.length;
    List<String> ans = new ArrayList<>();
    if (n == 0) {
        add(ans, l - 1, u + 1); // 因为中间的都不是inclusive，所以往外阔
        return ans;
      }
      add(ans, l - 1, nums[0]); //初始化，i.e.上面的例子先判断(-1, 0)之间 miss
      // 从index 1 开始 iterate 剩下的元素
      for (int i = 1; i < n; i++) {
        add(ans, nums[i - 1], nums[i]);
      }
      add(ans, nums[n - 1], u + 1); //判断从数组最后元素到range右边u+1间 miss
      return ans;
}

private void add(List<String> ans, long lo, long hi) { //两边都是exclusive
    if (lo == hi) return;
    else if (lo + 1 == hi) return; //比如 0,1 这样连续的情况
      //只差一个数的情况，比如上面的1,3，中间差了个2，也就是i + 1
    else if (lo + 1 == hi - 1) ans.add(String.valueOf(lo + 1));
    else {
        StringBuilder sb = new StringBuilder();
        sb.append(String.valueOf(lo + 1));
        sb.append("->");
        sb.append(String.valueOf(hi - 1));
        ans.add(sb.toString()); //sb加入list中
      }
}


时间复杂度O(n) 因为遍历数组，空间复杂度O(n) 因为新建List

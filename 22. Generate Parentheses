
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:

Input: n = 1
Output: ["()"]

 

Constraints:

    1 <= n <= 8
    
    
    
    
    class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList();
        backtrack(ans, "", 0, 0, n);
        return ans;
    }

    public void backtrack(List<String> ans, String cur, int open, int close, int max){
        if (cur.length() == max * 2) {
            ans.add(cur);
            return;
        }

        if (open < max)
            backtrack(ans, cur+"(", open+1, close, max);
        if (close < open)
            backtrack(ans, cur+")", open, close+1, max);
    }
}
    
    
    
    
    
    
  class Solution {
    List<String> ans = new ArrayList<>();
public List<String> generateParenthesis(int n) {
        if (n <= 0) return ans;
        dfs(n, n, "");
        return ans;
}
private void dfs(int left, int right, String s) {
        if (left == 0 && right == 0) { //左括号和右括号剩余个数
            ans.add(s);
            return;
        }

if (left == right){
              //剩余左右括号数相等，下一个只能用左括号
           dfs(left - 1, right, s + "(");
       } else { //下一个可以用左括号也可以用右括号
           if (left > 0){
                     dfs(left - 1, right, s + "("); //左括号
                }
               dfs(left, right - 1, s + ")"); //右括号
       }
    }
}

注意，在用string的时候backtracking不需要remove，因为每次使用string都是new了一个char[]，在回到上一层的时候，回到的是上一层生成的string，而不是这一层的string，所以不需要删除。但是如果用StringBuilder，就需要sb.deleteCharAt(sb.length() - 1)，且前面也要换成ans.add(sb.toString()).

    
    
    

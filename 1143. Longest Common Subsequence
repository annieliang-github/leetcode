Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
Input: text1 = "abcde", text2 = "ace" Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        //dp[i][j]含义：text1的前i个字符[0,i)和text2的前j个字符[0,j)的LCS
        //dp[i][0] = 0, 因为test1(0, i)和空串LCS为0。同理dp[0][j] = 0
        //数组建立时本来就默认了所有元素为0，不用刻意初始化
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) { //包括m和n
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) { //相等
         //在text1的前i - 1个字符和text2的前j - 1个字符的LCS基础上再加1
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else { //不相等
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }
}  

时间复杂度O(n^2), 空间复杂度O(n^2)

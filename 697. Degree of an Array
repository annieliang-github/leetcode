Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

class Solution {
    public int findShortestSubArray(int[] nums) {
        HashMap<Integer, Integer> num_counts = new HashMap<>();
        HashMap<Integer, Integer> first_seen = new HashMap<>();
        int degree = 0, min_length = 0;
        
        for (int i = 0; i < nums.length; i++) {
            num_counts.put(nums[i], num_counts.getOrDefault(nums[i], 0) + 1);
            first_seen.putIfAbsent(nums[i], i);
            
            int freq = num_counts.get(nums[i]);
            
            if (freq > degree) {
                degree = freq;
                min_length = i - first_seen.get(nums[i]) + 1;
            } else if (freq == degree) {
                min_length = Math.min(min_length, i - first_seen.get(nums[i]) + 1);
            }
        }
        return min_length;
    }
}

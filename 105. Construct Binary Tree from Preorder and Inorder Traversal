Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
Input: preorder = [3,9,20,15,7], 
inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
原理：先序遍历的顺序是根节点，左子树，右子树。中序遍历的顺序是左子树，根节点，右子树。根据先序遍历得到根节点，然后在中序遍历中找到根节点的位置，它的左边就是左子树的节点，右边就是右子树的节点。生成左子树和右子树就可以递归的进行了。
在inorder中获取index以后:
左子树：[preStart + 1, preStart+leftCount], [inStart, index - 1]
右子树：[preStart + leftCount + 1]，[index + 1, inEnd]

class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    int[] pre;
    int[] in;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        pre = preorder;
        in = inorder;
        for (int i = 0; i < inorder.length; i++) {
            map.put(inorder[i], i); // 构造哈希映射，帮助我们快速定位根节点
        }
        return build(0, preorder.length - 1, 0, inorder.length - 1);
    }
    private TreeNode build(int preStart, int preEnd, int inStart, int inEnd) {
        if (preStart > preEnd) return null;
        int rootVal = pre[preStart];
        TreeNode root = new TreeNode(rootVal);
        int index = map.get(rootVal);
        int leftCount = index - inStart; //左子树的节点数目
        
        root.left = build(preStart + 1, preStart+leftCount, inStart, index - 1);
        root.right = build(preStart + leftCount + 1, preEnd, index + 1, inEnd);
        return root;
    }
}

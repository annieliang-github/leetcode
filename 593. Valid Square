Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square. The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.
 
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: true

将这 4 个点按照 x 轴坐标第一关键字，y 轴坐标第二关键字进行升序排序。会有三种情况：

假设排完序之后的 4 个点依次为 p0, p1, p2, p3，那么我们可以发现正方形的四条边依次为 p0p1，p1p3，p3p2 和 p2p0，对角线为 p0p3 和 p1p2。(无论那种情况，排序后，四条边和对角线都是由这几个排列构成的）

注意计算两点之间的距离：(y2-y1)^2 + (x2-x1)^2

public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        int[][] input = new int[][] {p1, p2, p3, p4}; // 二维数组
    // 如果x不同，按照x从小到大（a[0]-b[0]）排；如果相同按a[1] - b[1]
        Arrays.sort(input, (a, b)->a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        return dist(input[0], input[1]) != 0 && // 首先不能边长为0
            dist(input[0], input[1]) == dist(input[1], input[3]) && 
            dist(input[1], input[3]) == dist(input[3], input[2]) &&
            dist(input[3], input[2]) == dist(input[2], input[0]) &&
            dist(input[0], input[3]) == dist(input[1], input[2]);
    }

private double dist(int[] a, int[] b) {
        return (b[1] - a[1]) * (b[1] - a[1]) + (b[0] - a[0]) * (b[0] - a[0]);
}


时间复杂度O(1)，空间复杂度O(1)

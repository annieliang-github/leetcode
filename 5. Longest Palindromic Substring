
Given a string s, return the longest palindromic substring in s.
法1：中心扩散法：时间O(n^2) 空间O(1)
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandFromCenter(s, i, i); //如racecar, e是单独的
            int len2 = expandFromCenter(s, i, i + 1); //如baba，是偶数
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2; //如racecar，把ptr向左放到开头
                end = i + len / 2; //ptr向右放到结尾
            }
        }
        return s.substring(start, end + 1); //因为substring func不包括结尾index
}
    
private int expandFromCenter(String s, int left, int right) {
        if (s == null || left > right) return 0;
        while (left >= 0 && right < s.length() && 
s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1; //right-left+1-2 = right-left-1,因为前面++--过
    }
}



法2：动态规划：时间O(n^2) 空间O(n)
class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        if (len < 2) return s;
        int maxLen = 1;
        int begin = 0; 
        boolean[][] dp = new boolean[len][len]; //dp[i][j] -> s[i,j]是否是回文串

        for (int i = 0; i < len; i++) {
            dp[i][i] = true; //对角线上的都是（因为只有一个字母）
        }
        //b xxxxxx b，此时i为第一个b的idx，j为最后一个b的idx
        //如果i的字符==j的字符，且i+1的字符==j-1的字符（即里面的x）
        //判断是否为回文串，要看这个dp[i][j]的左下角
        //如果dp[i+1][j-1]是，且dp[i][j]是，那就是回文串
        for (int j = 1; j < len; j++) {
            for (int i = 0; i < j; i++) {
                //先列再行填写，保证左下方的单元格先进行计算
                if (s.charAt(i) != s.charAt(j)) {
                    dp[i][j] = false; // 头尾字符不相等，不是回文串
                } else {
// 头尾字符相等，若去掉头尾只剩1/0个字符，是回文串
                    if (j - i < 3) dp[i][j] = true;
                    else dp[i][j] = dp[i + 1][j - 1];
                }
                //dp[i][j]为true，记录回文长度和起始位置
                if (dp[i][j] && j - i + 1 > maxLen) {
                    maxLen = j - i + 1;
                    begin = i;
                }
            }
        }
        return s.substring(begin, begin + maxLen);
    }
}

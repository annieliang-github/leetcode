There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.
Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.
Bellman-Ford 算法: 题目限制 K 次中转，特别像「Bellman-Ford 算法」描述中的操作：「我们对图中的每条边执行顶点次数−1次松弛操作，看看多绕一个顶点会不会使得最短路径更短」
public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        // dp[i][k]是经过k个中转站后到达站 i 的最少费用，设置K+1因为要考虑K=0
        int[][] dp = new int[n][K + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE); //先初始化成最大的
        }
        
        //flight[0]==src,即从src出发,经过0个中转站到达目的地flight[1]所花费的费用
        //即src直达某地，此时花费的费用为flight[2]
        for (int[] flight : flights) { //初始化src可直达的班次
            if (flight[0] == src) dp[flight[1]][0] = flight[2];
        }
        //起点终点都为src，说明花费为0
        for (int i = 0; i <= K; i++) { // 循环初始化数组中dst == src的行
            dp[src][i] = 0;
        }
        //直达已经初始化了（即k = 0的情况），现在从k = 1 的开始，即只有一个中转站开始
        for (int k = 1; k <= K; k++) {
            for (int[] flight : flights) {
            int from = flight[0];
                    int to = flight[1];
                if (dp[from][k - 1] != Integer.MAX_VALUE) { // 前一站可以到达

//飞k次到终点 = 最小值（直飞；或者从起点飞k-1次，加中转）
                    dp[to][k] = Math.min(dp[to][k], dp[from][k-1]+ flight[2]);
                }    
}    
        }
        return dp[dst][K] == Integer.MAX_VALUE ? -1 : dp[dst][K];
}


Starting with a positive integer N, we reorder the digits in any order (including the original order) such that the leading digit is not zero.
Return true if and only if we can do this in a way such that the resulting number is a power of 2.
class Solution {
    public boolean reorderedPowerOf2(int N) {

        //2的幂按位数创建的String[][]数组
        String[][] arr = {{"1","2","4","8"},
                          {"16","32","64"},
                          {"128","256","512"},
                          {"1024","2048","4096","8192"},
                          {"16384","32768","65536"},
                          {"131072","262144","524288"},
                          {"1048576","2097152","4194304","8388608"},
                          {"16777216","33554432","67108864"},
                          {"134217728","268435456","536870912"}
                          };
        String num = String.valueOf(N); //把int N转换成String，从而得到位数

        //比如num是1024，在String[][]的第三个subgroup里遍历
        for (int i = 0; i < arr[num.length() - 1].length; i++) {
            String str = strSort(num);
            String str2 = strSort(arr[num.length() - 1][i]); 
        //比较是否sort后有相同的str
            if (str.equals(str2)) return true;
        }
        return false;
}
    
//把字符串按字母升序排列 i.e.3417 -> 1347
private String strSort(String str) {
        char[] array = str.toCharArray();
        Arrays.sort(array);
        return new String(array);
    }
}

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.
class Solution {
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        
        dp[0][0] = grid[0][0];
        
        for (int i = 1; i < m; i++) { // 第一行元素只能从左上角开始向右移动到达
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        for (int i = 1; i < n; i++) { // 第一列元素只能从左上角开始向下移动到达
            dp[0][i] = dp[0][i - 1] + grid[0][i];
        }
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j - 1])+grid[i][j];
            }
        }
        return dp[m - 1][n - 1];
    }
}            时间复杂度、空间复杂度均为O(mn）

class Solution {         // 优化空间为O(n) -> 只存储上一行的dp值
    public int minPathSum(int[][] grid) {
        int [] dp = new int[grid[0].length]; //以行数为一维数组dp的长度
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[0] = 0;
            for(int i = 0; i < grid.length; i++){
            dp[0]=dp[0]+grid[i][0];
            for(int j = 1; j < grid[i].length; j++){
                dp[j]=Math.min(dp[j-1],dp[j])+grid[i][j];
            }
        }
        return dp[grid[0].length-1];
    }
}

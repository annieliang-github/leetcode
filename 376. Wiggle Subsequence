Given an integer array nums, return the length of the longest wiggle sequence.
A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.
A subsequence is obtained by deleting some elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.

class Solution {
    public int wiggleMaxLength(int[] nums) {
        if (nums.length <= 1) return nums.length;
        int up = 1, down = 1;

       //比如：nums = [1,17,5,10,13,15,10,5,16,8]，从1-17，up，所以up = down+1
    //5-10,5-13,5-15，都是up，所以up = down+1，不管有多少次上升，只取一次

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) { // uphill case
                up = down + 1;
            } else if (nums[i] < nums[i - 1]) {// downhill case
                down = up + 1;
            }
        }
        return Math.max(up, down);
    }
} 时间复杂度O(n），空间复杂度O(1)

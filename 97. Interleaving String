Given strings s1, s2, s3, find whether s3 is formed by an interleaving of s1 and s2. 
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true

public boolean isInterleave(String s1, String s2, String s3) {
    if (s1.length() + s2.length() != s3.length()) return false;

    //dp[i][j]表示 s1[0,i) 和 s2[0, j）组合后能否构成 s3[0, i + j)
    //如果 dp[i-1][j] == true，并且s1[i-1] == s3 [i+j-1]， dp[i][j] = true
    //如果 dp[i][j-1] == true，并且s2[j-1] == s3 [i+j-1]， dp[i][j] = true
char[] sc1 = s1.toCharArray();
        char[] sc2 = s2.toCharArray();
        char[] sc3 = s3.toCharArray();

    boolean[][] dp = new boolean[s1.length() + 1][s2.length() + 1];
    for (int i = 0; i <= s1.length(); i++) {
        for (int j = 0; j <= s2.length(); j++) {
            if (i == 0 && j == 0) {
                    dp[i][j] = true; //两个空string
            } else if (i == 0) {
                //如果 i=0 or j=0，判断s2和s3对应的字母或者s1和s3对应的字母即可
                    dp[i][j] = dp[i][j - 1] && sc2[j - 1] == sc3[j - 1];
            } else if (j == 0) {
                    dp[i][j] = dp[i - 1][j] && sc1[i - 1] == sc3[i - 1];
            } else {
                    dp[i][j] = dp[i - 1][j] && sc1[i - 1] == sc3.[i + j - 1]
                    || dp[i][j - 1] && sc2.[j - 1] == sc3[i + j - 1];
            }
        }
    }
    return dp[s1.length()][s2.length()];
}

时间复杂度O(mn)，空间复杂度O(mn)

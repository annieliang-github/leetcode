Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.


class Solution {
    public String minWindow(String s, String t) {
        // create smap and tmap, 128 each because of both lower and upper letters
        // start from left = 0, for loop for right
        // when char c in t, increment smap for this c,   
        // if c in t count >= c in s count, count++, because if <, we already have enough chars to form, this would be dup     
        // count -> keep track of how many valid chars we have in the window, while count == t.len, we have a valid but maybe not optimal answer, can increment left 
        // get the left char, if t doesn't have left char or t.left char count < s.leftchar count, we can shrink: left++, remove left count from smap
        // if ans is empty or new ans length is less, update
        int[] smap = new int[128];
        int[] tmap = new int[128];
        for (char c : t.toCharArray()) tmap[c]++;
        int left = 0, count = 0;
        String ans = "";
        for (int right = 0; right < s.length(); right++) {
            char c = s.charAt(right);
            if (tmap[c] > 0) {
                smap[c]++;
                if (tmap[c] >= smap[c]) count++;
            }
            if (count == t.length()) {
                while (tmap[s.charAt(left)] < smap[s.charAt(left)] || tmap[s.charAt(left)] == 0) {
                    if (tmap[s.charAt(left)] < smap[s.charAt(left)]) {
                        smap[s.charAt(left)]--; // condition to decrement smap count because shrinked window
                    }
                    left++; // will increment left no matter if this char exists or not
                }
                if (ans == "" || right - left + 1 < ans.length()) {
                    ans = s.substring(left, right + 1);
                }
            }
        }
        return ans;
    }
}

time O(s+t), space O(s+t)

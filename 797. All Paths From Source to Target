Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.
The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]

Explanation: There are two paths: 
0 -> 1 -> 3 and 0 -> 2 -> 3.


class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> res = new ArrayList<>();
        if (graph.length == 0) return res;
        dfs(graph, 0, new ArrayList<Integer>(), res);
        return res;
    }
    // curr:当前节点编号
    public void dfs(int[][] graph, int curr, List<Integer> list, List<List<Integer>> res){
        list.add(curr);
        if (curr == graph.length-1){
            res.add(new ArrayList<Integer>(list));
        }
        for (int i : graph[curr]){
            dfs(graph, i, list, res);
        }
        list.remove(list.size() - 1); //backtracking需要撤回到上一步
    }
}

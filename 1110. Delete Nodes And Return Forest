Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest.  You may return the result in any order.

 

Example 1:

Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

class Solution {
    List<TreeNode> res=new ArrayList<>();
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        Set<Integer> hashset = new HashSet<>();
        for (int i : to_delete) hashset.add(i);
        if (!hashset.contains(root.val)) res.add(root);
        DFS(root,hashset);
        return res;
    }
    public TreeNode DFS(TreeNode root,Set<Integer> hashset) {
        if (root == null) return null;
        root.left = DFS(root.left,hashset);
        root.right = DFS(root.right,hashset);
        if (hashset.contains(root.val)) {
            if (root.left != null) res.add(root.left);
            if (root.right != null) res.add(root.right);
            root = null;
        }
        return root;
    }
}


对于二叉树来说需要中序遍历结果与前序或后序结果结合才能构建出来，而二叉搜索树根据特性（右子树 > 根 > 左子树）只需要前序或后序遍历结果就可以构建出来。

此题和Serialize and Deserialize binary tree类似，但满足root val > 左子树，< 右子树。
比如树是    2       ，前序遍历：[2, 1, 3]，找到第一个比root大的元素index是右子树。
    1    3    

public class Codec {
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) return "";
        StringBuilder sb = new StringBuilder();
        dfs(root, sb);
        return sb.toString();
    }
    private void dfs(TreeNode root, StringBuilder sb) {
        if (root == null) return;
        sb.append(root.val + ",");
        dfs(root.left, sb);
        dfs(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data == null || data.equals("")) return null;
        String[] array = data.split(",");
        return construct(array, 0, array.length - 1);
    }
    private TreeNode construct(String[] s, int start, int end) {
        if (start > end) return null;
        // 先序遍历 第一个元素即为root
        TreeNode root = new TreeNode(Integer.parseInt(s[start]));
        int index;
        for (index = start; index <= end; index++) {
            // 因为root的值要比左子树大，index就是右子树开始的地方
            if (Integer.parseInt(s[index]) > Integer.parseInt(s[start])) 
break;
        }
        
        root.left = construct(s, start + 1, index - 1);
        root.right = construct(s, index, end);
        return root;
    }
}

时间复杂度O(n)，空间复杂度O(n)


Given a string, your task is to count how many palindromic substrings in this string. The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.
Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

dp[i][j] 表示字符串s在[i,j]区间的子串是否是一个回文串。
状态转移方程：当 s[i] == s[j] && (j - i < 2 || dp[i + 1][j - 1]) 时，dp[i][j]=true，否则为false （当有三个及以上字符时，看 dp[i+1][j-1] 是不是一个回文串）

class Solution {
    public int countSubstrings(String s) {
        boolean[][] dp = new boolean[s.length()][s.length()];
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            dp[i][i] = true;
            ans++;
        }
        for (int col = 1; col < s.length(); col++) {
            for (int row = 0; row < col; row++) {
                // row == col - 1 说明length是2，因为在matrix里direct above
                if (s.charAt(col) == s.charAt(row) && row == col - 1) {
                    dp[row][col] = true; //如果2个字母，且字母相同
                    ans++;
             //如果有3个以上字母，头尾一样，且中间是回文串
                } else if (s.charAt(col) == s.charAt(row) && dp[row+1][col-1]) {
                    dp[row][col] = true;
                    ans++;
                }
            }
        }
        return ans;
    }
}                时间复杂度O(n^2)， 空间复杂度O(n^2)
                

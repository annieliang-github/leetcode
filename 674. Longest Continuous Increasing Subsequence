Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.
A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].
Input: nums = [1,3,5,4,7]
Output: 3

class Solution { //法1：DP，时间复杂度O(n），空间复杂度O(n)
    public int findLengthOfLCIS(int[] nums) {
        if (nums.length == 0) return 0;
        int length = nums.length;
        int dp[] = new int[length];
        Arrays.fill(dp, 1);
        int result = 1;
        for (int i = 1; i< length; i++) {
            if (nums[i] > nums[i - 1]) {
                dp[i] = dp[i - 1] + 1;
                if (dp[i] > result) result = dp[i];
            }
        }
        return result;
    }
}

//法2：贪心：若nums[i + 1] > nums[i]，count++，否则count为1，记录count的最大值
时间复杂度O(n），空间复杂度O(1)
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        int length = nums.length;
        if (length == 0) return 0;
        int result = 1, count = 1;
        for (int i = 0; i < length - 1; i++) {
            if (nums[i + 1] > nums[i]) count++; //连续subsequence
            else count = 1; //不连续，则count重置
            if (count > result) result = count; //持续更新要return的result
        }
        return result;
    }
}


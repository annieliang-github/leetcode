You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Return the max sliding window. Input: nums = [1,3,-1,-3,5,3,6,7], k = 3        Output: [3,3,5,5,6,7]
方法一：大根堆pq，优先队列。时间复杂度O(nlogn)，空间复杂度O(n)
public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length, left = 0, right = left + k;
        PriorityQueue<int[]> pq = new PriorityQueue<>(n, (a, b) -> b[0] - a[0]);
        for (int i = 0; i < k; i++) { // 先放入k个数
            pq.offer(new int[] {nums[i], i}); //数组中左边[0]为数，右边为index
        }
        int[] ans = new int[n - k + 1]; //i.e.input = 8 ，k=3, output 6 个element
        ans[0] = pq.peek()[0]; // 先加入pq中最大的，即为max element 
        for (int i = k; i < n; i++) { // 从刚刚放入k个以后开始继续
            pq.offer(new int[] {nums[i], i});
            while (pq.peek()[1] <= i - k) { //sliding window长度超过k
                    pq.poll(); // 把堆顶最大值去掉
            }
            ans[i - k + 1] = pq.peek()[0]; //最大值放入ans
        }
        return ans;
}

方法二：单调队列 时间复杂度O(n)，空间复杂度：O(k)。队列中最多不会有超过 k+1 个元素。

如果队列不为空且当前考察元素大于等于队尾元素，则将队尾元素移除。直到，队列为空或当前考察元素小于新的队尾元素，i.e. queue: 5,3  array:5,3,4,1 其中3<4，把3出列放入4。当队首元素的下标小于滑动窗口左侧边界left时，表示队首元素已经不再滑动窗口内，因此将其从队首移除。当窗口右边界right+1大于等于窗口大小k时，队首元素就是该窗口内的最大值。

public int[] maxSlidingWindow(int[] nums, int k) {
        int[] ans = new int[nums.length - k +1];
LinkedList<Integer> queue = new LinkedList<>(); //双向队列。也可用Deque  
      for (int right = 0; right< nums.length; right++) {
            while (!queue.isEmpty() && nums[right] >= nums[queue.peekLast()]) {
                    queue.removeLast();
            }
            queue.addLast(right);
            int left = right - k + 1; //计算窗口左边界
// i.e. queue: 5,4,3,1  此时left= 3-3+1 = 1, 队首元素5的下标是0 < 1            if (queue.peekFirst() < left) queue.removeFirst();
            if (right + 1 >= k) ans[left] = nums[queue.peekFirst()];
        }
        return ans;
}

You may recall that an array arr is a mountain array if and only if:
arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:     
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.
Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.

方法一：使用两个变量 increasing  和 decreasing，分别记录每个山脉上升区间的长度以及下降区间的长度。通过遍历，寻找最长的山脉。

public int longestMountain(int[] arr) {
        int maxLen = 0, i = 1;
        int n = arr.length;
        while (i < n) {
            int increasing = 0, decreasing = 0;
            while (i < n && arr[i - 1] < arr[i]) {
                increasing++;
                i++;
            }
            while (i < n && arr[i - 1] > arr[i]) {
                decreasing++;
                i++;
            }
            
            if (increasing > 0 && decreasing > 0) { //同时完成爬坡和下坡，更新答案
                    maxLen = Math.max(maxLen, increasing + decreasing + 1);
            }
            
            while (i < n && arr[i - 1] == arr[i]) i++;
        }
        return maxLen;
}

时间复杂度O(n)，空间复杂度O(1)
方法二：DP，时间复杂度O(n)，空间复杂度O(n)

对于一座「山脉」，我们称首元素 B[0] 和尾元素 B[len(B)−1] 为「山脚」，满足题目要求 B[i−1]<B[i]>B[i+1] 的元素 B[i] 为「山顶」。为了找出数组 arr 中最长的山脉，我们可以考虑枚举山顶，再从山顶向左右两侧扩展找到山脚。

public int longestMountain(int[] arr) {
        int n = arr.length;
        if (n < 3) return 0;
        int[] left = new int[n];  //arr[i] 向左侧最多可以扩展的元素数目
        int[] right = new int[n];
        
        left[0] = 0; //当 i=0 时，arr[i] 为首元素，无法向左扩展
        right[n - 1] = 0;
        
        for (int i = 1; i < n; i++) {
            if (arr[i] > arr[i - 1]) left[i] = left[i - 1] + 1;
            else left[i] = 0;
        }
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] > arr[i + 1]) right[i] = right[i + 1] + 1;
            else right[i] = 0;
        }
        
        int ans = 0;
        
        //只有当 left[i]] 和 right[i] 均大于 0 时，arr[i] 才能作为山顶
        for (int i = 0; i < n; i++) {
            if (left[i] > 0 && right[i] > 0) {
//山脉长度为 left[i]+right[i]+1
                    ans = Math.max(ans, left[i] + right[i] + 1); 
            }
        }
        return ans;
}

     

Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
dfs(i,j,k) 判断以 (i,j) 位置出发，能否搜索到单词 word[k..]，其中 word[k..] 表示字符串 word从第 k 个字符开始的后缀子串.
如果 board[i][j]≠s[k]，当前字符不匹配，false。如果当前已经访问到字符串的末尾，且对应字符依然匹配，返回 true。否则，遍历当前位置的所有相邻位置。如果从某个相邻位置出发，能够搜索到子串 word[k+1..]，则返回 true，否则返回 false。对每一个位置 (i,j) 都调用函数 dfs 进行检查：只要有一处返回 true，就说明网格中能够找到相应的单词。

public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0)) {
            // 对每个位置i，j 都调用dfs，且从0开始
                    if (dfs(board, word, i, j, 0)) return true;
                }
            }
        }
        return false;
}
private boolean dfs(char[][] board, String word, int i, int j, int k) {
        if (k == word.length()) return true;
    // 判断边界条件
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) return false;
        if (word.charAt(k) != board[i][j]) return false;
        
        char temp = board[i][j];
        board[i][j] = '*'; //为了防止重复使用字母，先替换成*
        boolean ans = dfs(board, word, i - 1, j, k + 1) || 
dfs(board, word, i + 1, j, k + 1) ||
            dfs(board, word, i, j - 1, k + 1) || dfs(board, word, i, j + 1, k + 1);
        board[i][j] = temp; //做完dfs后，再改回来成temp
        return ans;
}

时间复杂度：O(mn 3^L) 其中L为字符串的长度。除了第一次可以进入 4 个分支以外，其余时间我们最多会进入 3 个分支（因为每个位置只能使用一次，所以走过来的分支没法走回去。
空间复杂度：O(1)

713. Subarray Product Less Than K

Your are given an array of positive integers. Count the number of (contiguous) subarrays where the product of all the elements in the subarray is less than k.
Input: nums = [10, 5, 2, 6], k = 100    Output: 8

Explanation: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]. 
NOTE:[10, 5, 2] is not included as the product of 100 is not strictly less than k.

双指针（滑动窗口）：left 和 right 指针开始时均指向 nums 数组的开头。

right 指针遍历 nums 数组，每遍历一个元素就更新一次乘积，即 product *= nums[right]：

若当前更新后的 product < k，则直接统计当前窗口中的元素个数（这恰好就是当前子数组中符合条件的全部子集个数）right - left + 1；
    
若更新后的 produc >= k，则此时需要缩小窗口的大小，即令当前 product 除以当前 left 指针指向的元素值，然后令 left 指针右移一位，直到当前的 product < k 为止，然后统计当前窗口中的元素个数，即为此时符合条件的子数组的个数，继续令 right 指针右移。

i.e.:区间[1, 2, 3, 4]满足要求，固定住right(4)的点，可选区间右[4]、[4, 3]、[4, 3, 2]、[4, 3, 2, 1]即为数组的长度，也就是right-left+1

时间复杂度O(n)，空间复杂度O(1)

public int numSubarrayProductLessThanK(int[] nums, int k) {
        if (k <= 1) return 0; //没有正整数的乘积strictly less than 1
        int left = 0; //初始化左右pointer都指着起始位置
        int len = nums.length;
        int product = 1, count = 0;
        for (int right = 0; right < len; right++) {
            product *= nums[right];
            while (product >= k) { //如果乘积>=k left向右缩小窗口
                product /= nums[left];
                left++;
            }
            count += right - left + 1;            
        }
        return count;
}

Given the head of a linked list, rotate the list to the right by k places.
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]


class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (k == 0 || head == null || head.next == null) return head;
        int n = 1; //因为已经确定至少有一个node了
        ListNode ptr = head, newTail = head;
        
        while (ptr.next != null) {
            ptr = ptr.next;
            n++; //获取链表长度
        }
        ptr.next = head; //形成环
        
        //向右移动的次数 k≥n 时，仅需要向右移动 k mod n 次
        //新链表的最后一个节点为原链表的第 (n−1)−(k % n) 个节点
        for (int i = 0; i < n - k % n - 1; i++) {
            newTail = newTail.next;
        }
        ListNode newHead = newTail.next; // 新的头结点指向断开环的位置
        newTail.next = null; //断开，最后一个指向null
        return newHead;
    }
}

时间复杂度：O(n)，最坏情况下，我们需要遍历该链表两次。
空间复杂度：O(1)，我们只需要常数的空间存储若干变量



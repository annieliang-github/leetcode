Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
class Solution { //遍历链表找到length，再用中点作为root
    ListNode globalHead;
public TreeNode sortedListToBST(ListNode head) {
        globalHead = head;
        int length = getLength(head);
        return buildTree(0, length - 1);
    }
    private int getLength(ListNode head) {
        int ans = 0;
        while (head != null) {
            ans++;
            head = head.next;
        }
        return ans;
}
private TreeNode buildTree(int left, int right) {
        if (left > right) return null;
        int mid = left + (right - left) / 2;
          TreeNode root = new TreeNode(); //不急着找中位数节点，用Node先占位
        root.left = buildTree(left, mid - 1);
         root.val = globalHead.val; //中序遍历到root时，再填充它的值
        globalHead = globalHead.next; //继续向下
        root.right = buildTree(mid + 1, right); //recurse on right
        return root;
    }
}
class Solution { //使用快慢指针找中点
    public TreeNode sortedListToBST(ListNode head) {
        if (head == null) return null;
        return helper(head, null);
    }
    private TreeNode helper(ListNode head, ListNode tail) {
        if (head == tail) return null;
        ListNode fast = head, slow = head;
        while (fast != tail && fast.next != tail) {
            fast = fast.next.next;   //快指针走两下，慢指针走一下
            slow = slow.next;   //slow即为中点
        }
        TreeNode root = new TreeNode(slow.val); 
        root.left = helper(head, slow);
        root.right = helper(slow.next, tail);
        return root;
    }
}

Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.
Input: [[0, 30],[5, 10],[15, 20]]
Output: 2

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals.length == 0) return 0;
        Arrays.sort(intervals, (int[] a, int[] b) -> (a[0] - b[0));
        //其实小根堆默认为a-b可不写
        PriorityQueue<Integer> minHeap = new PriorityQueue<>((a, b) -> a - b);
        //加入第一个元素（结束时间）
        minHeap.add(intervals[0][1]);
        for (int i = 1; i < intervals.length; i++) {
            
            //如果遇到的开始时间大于最小的结束时间，可以放入该房间
            if (intervals[i][0] >= minHeap.peek()) {
                minHeap.poll();
}
//否则只能重新开一个房间
minHeap.add(intervals[i][1]);
}
return minHeap.size();
}
}

Given the root of a binary tree and a targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) return false;
        if (root.left == null && root.right == null) 
return targetSum == root.val;
        return hasPathSum(root.left, targetSum - root.val) 
|| hasPathSum(root.right, targetSum - root.val);
    }
}

时间复杂度：O(N)，其中 N 是树的节点数。对每个节点访问一次。
空间复杂度：O(H)，其中 H 是树的高度。

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) return false;
        Queue<TreeNode> queNode = new LinkedList<>();
        Queue<Integer> queVal = new LinkedList<>();
        queNode.offer(root);
        queVal.offer(root.val);
        while (!queNode.isEmpty()) {
            TreeNode curr = queNode.poll();
            int temp = queVal.poll();
            if (curr.left == null && curr.right == null) { //已经到leaf
                if (temp == targetSum) return true;
                continue;
            }
            if (curr.left != null) {
                queNode.offer(curr.left);
                queVal.offer(curr.left.val + temp);
            }
            if (curr.right != null) {
                queNode.offer(curr.right);
                queVal.offer(curr.right.val + temp);
            }
        }
        return false;
    }
}
时间复杂度：O(N)，空间复杂度：O(N)

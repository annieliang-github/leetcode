Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The replacement must be in place and use only constant extra memory. 
i.e. 1,2,4,3,1 -> 1,3,1,2,4

class Solution {
    public void nextPermutation(int[] nums) {
        if (nums == null || nums.length == 0) return;
        int n = nums.length;
        int small = -1, big = -1;
        
        //从右往左，寻找第一个左边比右边小的数
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                small = i;
                break; //找到了 break
            }
        }
        if (small == -1) {
            reverse(nums, 0, n - 1); //翻转整个数组
            return;
        }
        for (int i = n - 1; i > small; i--) { //从右往左，找第一个比small大的数
            if (nums[i] > nums[small]) {
                big = i;
                break;
            }
        }
        swap(nums, small, big); //交换small和big
        reverse(nums, small + 1, n - 1); //换完以后，翻转small index后面的数
        return;
    }
       private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    private void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
}

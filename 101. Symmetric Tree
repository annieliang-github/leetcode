Given the root of a binary tree, check whether it is a mirror of itself 

Input: root = [1,2,2,3,4,4,3]
Output: true

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
            return dfs(root, root);
    }
    private boolean dfs(TreeNode t1, TreeNode t2) {
        //终止条件是两个节点都为空, 或者有一个为空, 或者两个节点的值不相等
        if (t1 == null && t2 == null) return true;
        if (t1 == null || t2 == null) return false;
    if (t1.val == t2.val) return true;
        return helper(t1.right, t2.left) && helper(t1.left, t2.right);
    }      
}

时间复杂度：遍历了这棵树，渐进时间复杂度为 O(n)。
空间复杂度：和递归使用的栈空间有关，这里递归层数不超过n，故渐进空间复杂度为 O(n)。

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null || root.left == null && root.right == null) 
return true;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root.left);          //将根节点的左右孩子放到队列中
        queue.offer(root.right);
        
        while (!queue.isEmpty()) {
            TreeNode left = queue.poll();
            TreeNode right = queue.poll();
//如果两个节点都为空就继续循环，两者有一个为空就返回false
            if (left == null && right == null) continue;
            if (left == null || right == null) return false;
            if (left.val != right.val) return false;
             //将左节点的左孩子，右节点的右孩子放入队列
            queue.offer(left.left); 
            queue.offer(right.right);
            queue.offer(left.right);
            queue.offer(right.left);
        }
        return true;
    }
}
时间复杂度：遍历了这棵树，O(n)。空间复杂度：维护了一个队列，O(n)。

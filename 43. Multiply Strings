
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
//遍历 num2 每一位与 num1 进行相乘，将每一步的结果进行累加
public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) return "0";
        String ans = "0";
        // 从最右开始，num2 逐位与 num1 相乘
        for (int i = num2.length() - 1; i >= 0; i--) {
            int carry = 0;
            //保存 num2 第i位数字与 num1 相乘的结果
            StringBuilder temp = new StringBuilder();
            //num2 除了第一位的其他位与 num1 运算的结果需要 补0
            for (int j = 0; j < num2.length() - 1 - i; j++) {
                    temp.append(0);
            }
            int n2 = num2.charAt(i) - '0'; //string转为数字
            
            for (int j = num1.length() - 1; j >= 0 || carry != 0; j--) {
                //因为是j >= 0 或 carry != 0，分类讨论
                int n1 = j < 0 ? 0 : num1.charAt(j) - '0';
                int product = (n1 * n2 + carry) % 10; //取mod更新乘积
                temp.append(product);
                carry = (n1 * n2 + carry) / 10; //除以10更新carry
            }
            ans = addString(ans, temp.reverse().toString()); //从后往前，reverse
        }
        return ans;
}

//对两个字符串数字进行相加，返回字符串形式的和
private String addString(String num1, String num2) {
        StringBuilder sb = new StringBuilder();
        int carry = 0;
        for (int i = num1.length() - 1, j = num2.length() - 1; i >= 0 || j >= 0 || carry != 0; i--, j--) {
            int x = i < 0 ? 0 : num1.charAt(i) - '0';
            int y = j < 0 ? 0 : num2.charAt(j) - '0';
            int sum = (x + y + carry) % 10;
            sb.append(sum);
            carry = (x + y + carry) / 10;
        }
        return sb.reverse().toString();
}

时间复杂度：O(M N)。空间复杂度：O(M+N)。用于存储计算结果。

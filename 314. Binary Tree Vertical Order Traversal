314. Binary Tree Vertical Order Traversal

Given a binary tree, return the vertical order traversal of its nodes' values. If two nodes are in the same row and column, the order should be from left to right.
Input: [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]

class Solution {
    int min = 0, max = 0;
    public List<List<Integer>> vertalOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res;
        dfs(root, 0);
        //初始化最左的col到最右的col（new arrayList）
        for (int i = min; i <= max; i++) {
            res.add(new ArrayList<>());
}

Queue<TreeNode> queue = new LinkedList<>()；
Queue<Integer> index = new LinkedList<>();
queue.offer(root);
index.offer(-min);

while (!queue.isEmpty()) {
    TreeNode curr = queue.poll();
    int idx = index.poll();
res.get(idx).add(curr.val);  //按照col把node加入res里
if (curr.left != null) {
    queue.offer(curr.left);
    index.offer(idx - 1); //左边
}
if (curr.right != null) {
    queue.offer(curr.right);
    index.offer(idx + 1); //右边
}
}
return res;
}

    private void dfs(TreeNode root, int index) {
    if (root == null) return;
    min = Math.min(min, index); //找出最靠左和最靠右的index
    max = Math.max(max, index); //假设root从0开始
    dfs(root,left, index - 1);
    dfs(root.right, index + 1);
}
}

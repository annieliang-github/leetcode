
Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        List<Integer> list = new ArrayList<>();
        inorder(root, list); //中序遍历BFS后，得到升序数组
        int left = 0, right = list.size() - 1;
        while (left < right) {
            int sum = list.get(left) + list.get(right);
            if (sum == k) return true;
            else if (sum < k) left++;
            else if (sum > k) right--;
        }
        return false;
    }
    private void inorder(TreeNode root, List<Integer> list) {
        if (root == null) return; 
        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
}
时间复杂度O(n）：遍历每一个node，空间复杂度O(n)：数组的长度


class Solution { //dfs 递归解法
    public boolean findTarget(TreeNode root, int k) {
        Set<Integer> set = new HashSet<>();
        return find(root, k, set);
    }
    private boolean find(TreeNode root, int k, Set<Integer> set) {
        if (root == null) return false;
        //对于每个值为p的节点，在set中检查是否存在k-p
        if (set.contains(k - root.val)) return true;
        set.add(root.val); //如果set中不包括k-p的信息，放p入set
        //如果遍历完都没有找到一对节点和为k，则不存在两个和为k的节点
        return find(root.left, k, set) || find(root.right, k, set);
    }
}

class Solution { //bfs queue解法
    public boolean findTarget(TreeNode root, int k) {
        Set<Integer> set = new HashSet<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                if (set.contains(k - node.val)) return true;
                set.add(node.val);
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }    
        }
        return false;
    }
}

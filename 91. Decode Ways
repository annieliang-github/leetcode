A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> "1" ，'B' -> "2"...

Given a string s containing only digits, return the number of ways to decode it.

class Solution {
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) return 0;
        //dp[i] stores the number of ways up to index i
        int[] dp = new int[s.length() + 1];
        dp[0] = 1; // number of ways to decode @ length 0
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
        for (int i = 2; i <= s.length(); i++) { //注意：<=
            //分别找到index i所指的字母对应数字，以及i和i-1对应的2位数字
            int oneDigit = Integer.valueOf(s.substring(i - 1, i));
            int twoDigit = Integer.valueOf(s.substring(i - 2, i));
            if (oneDigit >= 1) dp[i] += dp[i -1];
            if (twoDigit >= 10 && twoDigit <= 26) dp[i] += dp[i - 2];
        }
        return dp[s.length()];
    }
}


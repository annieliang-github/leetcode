Given the root of a binary tree, return the leftmost value in the last row of the tree.
 
Input: root = [2,1,3]
Output: 1





BFS: 时间复杂度：O(n）空间O(width)
一般的层序遍历是每层从左到右，遍历到最后的元素就是右下角元素，此题反之

class Solution {
    public int findBottomLeftValue(TreeNode root) {
        //从右往左遍历，先添加右子节点，再添加左子节点
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        TreeNode curr = null;
        while (!queue.isEmpty()) {
            curr = queue.poll();
            if (curr.right != null) queue.offer(curr.right);
            if (curr.left != null) queue.offer(curr.left);
        }
        //当队列为空时，循环结束，最后一个遍历到的节点就是最左边的节点
        return curr.val;
    }
}

DFS: 层级索引与List索引相对应，递归从左至右遍历，将每层最左端的节点放入List，并返回List最后一个节点的val值。时间复杂度：O(n）空间O(height)
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        List<Integer> list = new ArrayList<>(); //list记录每层最左
        dfs(root, list, 0); //root算第0层开始
        return list.get(list.size() - 1); //list最后一个元素即为最后一行最左
    }

    private void dfs(TreeNode node, List<Integer> list, int level) {
        if (node == null) return;
        if (list.size() == level) list.add(node.val); //对应上      
        dfs(node.left, list, level + 1);
        dfs(node.right, list, level + 1);
    }
}

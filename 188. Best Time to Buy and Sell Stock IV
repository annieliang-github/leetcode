
You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k. Find the maximum profit you can achieve. You may complete at most k transactions.
class Solution {
    public int maxProfit(int k, int[] prices) {
        int length = prices.length;
        if (length < 2) return 0;

        //因为一次交易至少涉及两天，如果k大于总天数的一半，取天数一半即可
        k = Math.min(k, length / 2);

        //dp[i][j][k]代表 第i天交易了k次时的最大利润，其中j:0不持有，1持有
        int[][][] dp = new int[length][2][k + 1];
        
        //对于第0天来说，它所能够获取的最大利润只有两种，与交易次数毫无关系
        //不持有股票时：dp[0][0][k]=0
        //持有股票时：dp[0][1][k]=-prices[0]
        for (int i = 0; i <= k; i++) {
            dp[0][0][i] = 0;
            dp[0][1][i] = -prices[0];
        }
        
        for (int i = 1; i < length; i++) {
            for (int K = 1; K <= k; K++) {
                //第i天不持有股票时：如果第i-1天也不持有股票，状态不变，
                //如果第i-1天持有股票，说明在第i天把股票卖了，利润就要多prices[i]
                    dp[i][0][K] = Math.max(dp[i-1][0][K], dp[i-1][1][K] + prices[i]);
                
                //第i天持有股票时：如果第i-1天也持有股票，状态不变
                //如果第i-1天不持股，说明在第i天买入，交易次数要比前一天+1
                    dp[i][1][K] = Math.max(dp[i-1][1][K], dp[i-1][0][K-1] - prices[i]);
            }
        }

        //第length - 1天，卖出股票，交易k次
        return dp[length - 1][0][k];
    }
}

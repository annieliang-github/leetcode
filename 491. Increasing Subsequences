Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. 

The given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.
 
Input: nums = [4,6,7,7]
Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]

class Solution {
    List<List<Integer>> ans = new ArrayList<>();
    List<Integer> subset = new ArrayList<>();
    public List<List<Integer>> findSubsequences(int[] nums) {
        dfs(nums, 0);
        return ans;
    }
    
    private void dfs(int[] nums, int index) {
   	 if (subset.size() > 1) { // 至少需要两个元素
            ans.add(new ArrayList<>(subset));
            // 注意这里不要加return，因为要取树上的所有节点
        }
        
        Set<Integer> set = new HashSet<>();
        for (int i = index; i < nums.length; i++){
            if (set.contains(nums[i])) continue; // 元素重复了，跳过
            // 如果subset为空可加入；或者已经有元素，但现元素 >= 上一个元素，可加入
            if (subset.size() == 0 || 
  (subset.size() > 0 && nums[i] >= subset.get(subset.size() - 1))){
         	subset.add(nums[i]);
        	dfs(nums, i + 1);
       	set.add(nums[i]);
    		subset.remove(subset.size() - 1);
            }
        }
    }
}

时间复杂度：O(2^n * n)。需要对子序列做二进制枚举，需要 O(n) 的时间添加到答案中。
空间复杂度：O(n)。临时数组的空间代价是 O(n)，递归使用的栈空间的空间代价也是 O(n)。

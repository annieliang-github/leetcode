There are a total of n courses you have to take, labeled from 0 to n-1. To take course 0 you have first to take course 1, which is expressed as a pair: [1,0]. Given the total number of courses n, a list of direct prerequisite pairs and a list of queries pairs. Return a list of boolean, the answers to the given queries.
BFS
public List<Boolean> checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {
        // 创建一个adjancy list，如{key:0,value:{1,3,4}} 代表了0可以到达1，3，4
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] course : prerequisites) {
            Set<Integer> set = map.containsKey(course[0]) ? 
map.get(course[0]) : new HashSet<>();
            set.add(course[1]);
            map.put(course[0], set);
        }
        // 遍历graph, 用HashSet保存最终结果
        Set<String> res = new HashSet<>();
        for (int i = 0; i < n; i++) {
            bfs(map, i, n, res);
        }
        
        List<Boolean> ans = new ArrayList<>();
        for (int[] query : queries) {
            ans.add(res.contains(query[0] + " " + query[1]));
        }
        return ans;
}

private void bfs(Map<Integer, Set<Integer>> map, int i, int n, Set<String> res) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n];
        //如果这个值在map中不存在，说明他到其他课程没有可达关系
        if (!map.containsKey(i)) return;
        queue.offer(i);
        visited[i] = true;
        while (!queue.isEmpty()) {
            Set<Integer> data = map.get(queue.poll());
            if (data != null) {
                for (Integer d : data) {
                    if (!visited[d]) {
                        res.add(i + " " + d);
                        queue.offer(d);
                        visited[d] = true;
                    }
                }
            }
        }
}

因为Flyod算法计算最短路径，假如从一个course到另一个有最短路径，说明是prerequisite

public List<Boolean> checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {
        boolean[][] dp = new boolean[n][n];
        for (int[] course : prerequisites) {
            dp[course[0]][course[1]] = true; //因为course[0]是course[1]的必修课
        } 
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    dp[i][j] = dp[i][j] || (dp[i][k] && dp[k][j]);
                }
            }
        }
        List<Boolean> ans = new ArrayList<>();
        for (int[] query : queries) {
            ans.add(dp[query[0]][query[1]]);
        }
        return ans;
}

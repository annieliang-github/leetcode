Write a program to solve a Sudoku puzzle by filling the empty cells. The '.' character indicates empty cells.

class Solution {
    public void solveSudoku(char[][] board) {
        backtracking(board);
    }
    private boolean backtracking(char[][] board) {
        for (int i = 0; i < 9; i++) { // 遍历行
            for (int j = 0; j < 9; j++) { // 遍历列
                if (board[i][j] != '.') continue;
                for (char num = '1'; num <= '9'; num++) {
                    if (isValid(board, i, j, num)) { // (i, j) 位置放 num 是否合适
                        board[i][j] = num;
                        if (backtracking(board)) return true; // 找到合适一组立刻返回
                        board[i][j] = '.'; // 回溯，撤销 nums
                    }
                }
                return false;    // 9个数都试完了，都不行，那么就返回false
            }
        }
        return true; // 遍历完没有返回false，说明找到了合适棋盘位置了
    }
    private boolean isValid(char[][] board, int row, int col, char num) {     
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num) return false;  // 判断行里是否重复
            if (board[i][col] == num) return false;  // 判断列里是否重复
        }
        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;
        for (int i = startRow; i < startRow + 3; i++) { // 判断9方格里是否重复
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == num ) return false;
            }
        }
        return true;
    }
}
时间复杂度： O(9^m)， 空间复杂度：O(m)， m是'.'的数目。  


Given the roots of two binary trees p and q, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

Input: p = [1,2,3], q = [1,2,3]

Output: true



如果两个二叉树都为空，则两个二叉树相同。如果两个二叉树中有且只有一个为空，则两个二叉树一定不相同。如果两个二叉树都不为空，那么首先判断它们的根节点的值是否相同，若不相同则两个二叉树一定不同，若相同，再分别判断两个二叉树的左子树是否相同以及右子树是否相同。这是一个递归的过程，因此可以使用深度优先搜索，递归地判断两个二叉树是否相同。

public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null) return true;
        else if (p == null || q == null) return false; //只有一个为null
        else if (p.val != q.val) return false; //值不相等        
        else return isSameTree(p.right, q.right) 
                  && isSameTree(p.left, q.left);  //需同时满足左右为true
}


时间复杂度：O(min⁡(m,n))。对两个二叉树同时进行深度优先搜索，只有当两个二叉树中的对应节点都不为空时才会访问到该节点，因此被访问到的节点数不会超过较小的二叉树的节点数。
空间复杂度：O(min⁡(m,n))。



class Solution {

	public boolean isSameTree(TreeNode p, TreeNode q) {

        Queue<TreeNode> q1 = new LinkedList<>();
        Queue<TreeNode> q2 = new LinkedList<>();

        q1.offer(p);
        q2.offer(q);

        while(!q1.isEmpty() && !q2.isEmpty()){
            TreeNode current1 = q1.remove();
            TreeNode current2 = q2.remove();

            if(current1 == null && current2 == null) continue; // Say after root both left are null

            if(current1 == null || current2 == null) return false; // If one is null
            if(current1.val != current2.val) return false; // if the values are not same


            // Add including null left for this case [1,2]  [1,null,2] - Second level will be 2,2 it would return true

            q1.offer(current1.left);
            q1.offer(current1.right);

            q2.offer(current2.left);
            q2.offer(current2.right);
        }

        return q1.isEmpty() && q2.isEmpty();
    }
}

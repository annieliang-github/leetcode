Given a non-empty binary tree, return the average value of the nodes on each level in 
the form of an array.

Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]

class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> ans = new ArrayList<>();
        if (root == null) return ans;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root); //先把第一个放进queue
        
        while (!queue.isEmpty()) {
            double sum = 0; //注意是double
            int size = queue.size();
            for (int i = 0; i < size; i++) { //for all item in queue
                TreeNode curr = queue.poll(); //分别poll每个elem
                sum += curr.val;
                
                if (curr.left != null) queue.offer(curr.left);
                if (curr.right != null) queue.offer(curr.right);
            }
            ans.add(sum / size);
        }
        return ans;
    }
} 

BFS解法：时间复杂度O(n)，n为number of nodes 空间复杂度O(m), m为每个level最多几个elem


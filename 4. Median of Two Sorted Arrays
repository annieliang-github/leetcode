Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
最笨的方法：merge 然后取median 时间复杂度O(m+n)，空间复杂度O(m+n)



public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null) return 0;
        int len1 = nums1.length, len2 = nums2.length;
        if (len1 == 0) {
            if (len2 % 2 == 0) return (nums2[len2 / 2 - 1] + nums2[len2 / 2]) / 2.0;
            else return nums2[len2 / 2];
        }
        if (len2 == 0) {
            if (len1 % 2 == 0) return (nums1[len1 / 2 - 1] + nums1[len1 / 2]) / 2.0;
            else return nums1[len1 / 2];
        }
        int[] arr = merge(nums1, nums2), len = arr.length, mid = len / 2; 
        if (len % 2 == 0) return (arr[mid] + arr[mid - 1]) / 2.0;
        else return arr[mid];
}    
private int[] merge(int[] nums1, int [] nums2) {
        int len1 = nums1.length, len2 = nums2.length, ptr1 = 0, ptr2 = 0, ptr = 0;
        int[] newArr = new int[len1 + len2];
        while (ptr1 < len1 && ptr2 < len2) {
            if (nums1[ptr1] < nums2[ptr2]) newArr[ptr++] = nums1[ptr1++];
            else newArr[ptr++] = nums2[ptr2++];
        }
        while (ptr1 < len1) newArr[ptr++] = nums1[ptr1++];
         while (ptr2 < len2) newArr[ptr++] = nums2[ptr2++];
        return newArr;
}



class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int left = (n + m + 1) / 2;
        int right = (n + m + 2) / 2;
        int mid1 = getKth(nums1, 0, m - 1, nums2, 0, n - 1, left);
        int mid2 = getKth(nums1, 0, m - 1, nums2, 0, n - 1, right);
        //将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。
        return (mid1 + mid2) / 2.0;
    }
    
  
  
    private int getKth(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2, int k) {
        int len1 = end1 - start1 + 1, len2 = end2 - start2 + 1;
        
        //len1为长度短的那个数组, 保证如果有数组空了，一定是 len1 
        if (len1 > len2) return getKth(nums2, start2, end2, nums1, start1, end1, k);
        if (len1 == 0) return nums2[start2 + k - 1]; //len1已经空了，只要返回len2的第 k 个数字（i.e.第五个就是index4）
        
        //如果 k=1 ，我们只要返回两个数组首元素的最小值即可
        if (k == 1) return Math.min(nums1[start1], nums2[start2]);
        //遇到数组长度小于 k/2的时候 将箭头指向它的末尾就可以了
        int i = start1 + Math.min(len1, k / 2) - 1;
        int j = start2 + Math.min(len2, k / 2) - 1;
        
        //比较两个数组的第 k/2 个数字，如果 k 是奇数，向下取整
        //如果哪个小，就表明该数组的前 k/2 个数字都不是第 k 小数字，所以可以排除
        if (nums1[i] > nums2[j]) { //nums2 j前的都可排除，从j+1开始，到
            return getKth(nums1, start1, end1, nums2, j + 1, end2, k - (j - start2 + 1));
        } else {
            //必须根据排除数的个数减少 k 的值，而不能直接将 k 减去 k/2。
            return getKth(nums1, i + 1, end1, nums2, start2, end2, k - (i - start1 + 1));
        }
    }
}


时间复杂度：每进行一次循环，我们就减少 k/2 个元素，所以时间复杂度是 O(log(k)，而 k=(m+n)/2，所以最终的复杂也就是 O(log(m+n）O(log(m+n）O(log(m+n）。

空间复杂度：虽然我们用到了递归，但是可以看到这个递归属于尾递归，所以编译器不需要不停地堆栈，所以空间复杂度为 O(1)O(1)O(1)。







方法二：时间复杂度O(logm），m为短的数组的长度

public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);
        int m = nums1.length, n = nums2.length;
        int left = 0, right = m;
        // median1：前一部分的最大值 median2：后一部分的最小值
        int median1 = 0, median2 = 0;

        while (left <= right) {
            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]
            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]
            int i = (left + right) / 2;
            int j = (m + n + 1) / 2 - i;

            // l1, l2, r1, r2分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]
            int l1 = (i == 0 ? Integer.MIN_VALUE : nums1[i - 1]);
            int l2 = (i == m ? Integer.MAX_VALUE : nums1[i]);
            int r1 = (j == 0 ? Integer.MIN_VALUE : nums2[j - 1]);
            int r2 = (j == n ? Integer.MAX_VALUE : nums2[j]);

            if (l1 <= nums_j) {
                median1 = Math.max(l1, r1);
                median2 = Math.min(l2, nums_j);
                    left = i + 1;
            } else {
                    right = i - 1;
            }
        }
        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;
}


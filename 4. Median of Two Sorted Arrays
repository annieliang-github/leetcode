Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
最笨的方法：merge 然后取median 时间复杂度O(m+n)，空间复杂度O(m+n)



public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null) return 0;
        int len1 = nums1.length, len2 = nums2.length;
        if (len1 == 0) {
            if (len2 % 2 == 0) return (nums2[len2 / 2 - 1] + nums2[len2 / 2]) / 2.0;
            else return nums2[len2 / 2];
        }
        if (len2 == 0) {
            if (len1 % 2 == 0) return (nums1[len1 / 2 - 1] + nums1[len1 / 2]) / 2.0;
            else return nums1[len1 / 2];
        }
        int[] arr = merge(nums1, nums2), len = arr.length, mid = len / 2; 
        if (len % 2 == 0) return (arr[mid] + arr[mid - 1]) / 2.0;
        else return arr[mid];
}    
private int[] merge(int[] nums1, int [] nums2) {
        int len1 = nums1.length, len2 = nums2.length, ptr1 = 0, ptr2 = 0, ptr = 0;
        int[] newArr = new int[len1 + len2];
        while (ptr1 < len1 && ptr2 < len2) {
            if (nums1[ptr1] < nums2[ptr2]) newArr[ptr++] = nums1[ptr1++];
            else newArr[ptr++] = nums2[ptr2++];
        }
        while (ptr1 < len1) newArr[ptr++] = nums1[ptr1++];
         while (ptr2 < len2) newArr[ptr++] = nums2[ptr2++];
        return newArr;
}


方法二：时间复杂度O(logm），m为短的数组的长度

public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);
        int m = nums1.length, n = nums2.length;
        int left = 0, right = m;

        // median1：前一部分的最大值 median2：后一部分的最小值
        int median1 = 0, median2 = 0;
        while (left <= right) {
            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]
            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]
            int i = (left + right) / 2;
            int j = (m + n + 1) / 2 - i;

            // l1, r1, l2, r2 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]
            int l1 = (i == 0 ? Integer.MIN_VALUE : nums1[i - 1]);
            int r1 = (i == m ? Integer.MAX_VALUE : nums1[i]);
            int l2 = (j == 0 ? Integer.MIN_VALUE : nums2[j - 1]);
            int r2 = (j == n ? Integer.MAX_VALUE : nums2[j]);

            if (l1 <= l2) {
                median1 = Math.max(l1, l2);
                median2 = Math.min(r1, r2);
                left = i + 1;
            } else {
                    right = i - 1;
            }
        }
        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;
}

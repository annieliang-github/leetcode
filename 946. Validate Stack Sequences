Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1


一个index指针。将pushed元素插入到栈里，每次会循环比较是否和当前元素popped[j]一样，是的话则pop，同时j++，popped当前元素指向下一个。最后popped的元素都遍历过，则说明成功，否则失败。

public boolean validateStackSequences(int[] pushed, int[] popped) {
        Stack<Integer> stack = new Stack<>();
        int size = pushed.length;
        int j = 0; // j 是popped的index
        for (int pushNum : pushed) {
            stack.push(pushNum); // 对 pushed 中的每一个元素进行遍历（直接入栈）
            while (!stack.isEmpty() && j < popped.length && 
stack.peek() == popped[j]) {
                // 弹出所有符合 popped 序列的栈内元素，increment j
                stack.pop();
                j++;
            }
        }
        return stack.isEmpty(); // 最后检查栈是不是空的，空了说明原来的序列可进行操作
}

时间复杂度O(n)，空间复杂度O(n)，n 是 pushed 和 popped 的长度。

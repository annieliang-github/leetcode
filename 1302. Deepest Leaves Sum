Given the root of a binary tree, return the sum of values of its deepest leaves. 

DFS解法：时间:O(n)，n为节点数。空间:最坏情况为O(N),最好情况为O(log(N))
private int maxDepth = -1; //搜索到的节点的最大深度
    private int sum = 0;
    public int deepestLeavesSum(TreeNode root) {
        if (root == null) return 0;
        return dfs(root, 0);
}
private int dfs(TreeNode root, int depth) {
        if (root == null) return 0;
        if (maxDepth < depth) { //节点的深度大于maxdep，找到了一个深度更大的节点
            maxDepth = depth; //将 maxdep 置为 depth，并将 sum 置为节点 x 的权值
            sum = root.val;
        } else if (depth == maxDepth) { //等于，将节点的权值添加到 sum 中
            sum += root.val;
        }
        
        if (root.left != null) dfs(root.left, depth + 1);
        if (root.right != null) dfs(root.right, depth + 1);
        return sum;
}

BFS解法：时间O(n)，n为节点数。空间O(n)，使用了额外的队列

一层层遍历，每次都把该层的节点和加起来。如果还有下一层，上一层的节点和清零。遍历完，最后一次和就是最后一层的节点和。

public int deepestLeavesSum(TreeNode root) {
        if (root == null) return 0;
        int sum = 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            sum = 0; //如果还有下一层，清零重新开始
            int size = queue.size();
            
            for (int i = 0; i < size; i++) { //在loop里poll出currNode
                TreeNode node = queue.poll();
                sum += node.val;
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }
        }
        return sum;
}

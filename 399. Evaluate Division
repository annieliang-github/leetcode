You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?. Return the answers to all queries. If a single answer cannot be determined, return -1.0.
相当于可以做成一个有向图 a->b边的weight就是 g[a][b], 转换成多源最短路问题

class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {

        //需要遍历equations数组，找出其中所有不同的字符串
//通过哈希表将每个不同的字符串映射成整数
        int count = 0;
        Map<String, Integer> variables = new HashMap<>();
        int n = equations.size();
        for (int i = 0; i < n; i++) {
            if (!variables.containsKey(equations.get(i).get(0))) { //起点
                variables.put(equations.get(i).get(0), count++);
            }
            if (!variables.containsKey(equations.get(i).get(1))) { //终点
                variables.put(equations.get(i).get(1), count++);
            }
        }
        double[][] graph = new double[count][count];
        for (int i = 0; i < count; i++) {
            Arrays.fill(graph[i], -1.0); ////初始化邻接矩阵距离为-1
        }
        for (int i = 0; i < n; i++) {
            int va = variables.get(equations.get(i).get(0));
            int vb = variables.get(equations.get(i).get(1));
            graph[va][vb] = values[i]; //读入边
            graph[vb][va] = 1.0 / values[i];
        }
          for (int k = 0; k < count; k++) { //弗洛伊德求多源汇最短路
            for (int i = 0; i < count; i++) {
                for (int j = 0; j < count; j++) {
                    if (graph[i][k] > 0 && graph[k][j] > 0) { // 如果都不是-1
                        //i.e.:a/b=2, b/c=3, a/c=a/b*b/c= 6
                        graph[i][j] = graph[i][k] * graph[k][j];
                    }
                }
            }
        }
        int queriesCount = queries.size();
        double[] ans = new double[queriesCount];

        for (int i = 0; i < queriesCount; i++) {
            List<String> query = queries.get(i);
            double result = -1.0;
            if (variables.containsKey(query.get(0)) &&
                 variables.containsKey(query.get(1))) {
                int ia = variables.get(query.get(0)); //起点的index
                int ib = variables.get(query.get(1)); //终点的index
                if (graph[ia][ib] > 0) { //大于0说明有路径
                    result = graph[ia][ib];
                }
            }
            ans[i] = result;
        }
        return ans;
    }
}

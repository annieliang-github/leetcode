Given the root of a binary tree, return the preorder traversal of its nodes' values.前序遍历首先访问根结点然后遍历左子树，最后遍历右子树

DFS: 时间复杂度：O(n)，其中n是二叉树的节点数。空间复杂度：O(n)，为递归过程中栈的开销，平均情况下为 O(log⁡n)，最坏情况下树呈现链状，为 O(n)。

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        dfs(root, list);
        return list;
    }
    private void dfs(TreeNode root, List<Integer> array) {
        if (root == null) return;
        array.add(root.val); //先放入根节点
        dfs(root.left, array);
        dfs(root.right, array);
    }
}

递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来

iteratively：时间复杂度：O(n)，空间复杂度：O(n)，为迭代过程中显式栈的开销，平均情况下为 O(log⁡n)，最坏情况下树呈现链状，为O(n)。

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) return list;
        
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            list.add(node.val); //先放入根节点
            if (node.right != null) {
                    stack.push(node.right); //放入右侧再放左侧
            } //才能保证stack FILO后是从左往右
            if (node.left != null) {
                    stack.push(node.left);
            }
        }
        return list;
    }
}


Given the ball's start position, the destination and the maze, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.
本题中从某点朝四个方向走的路径权重不同，所以本题不适合用常规的BFS求解最短路径。此题是适用标准Dijkstra（BFS+PQ）算法的模板题。
Dijkstra算法的整体框架类似于BFS，不同之处在于我们使用的是一个优先队列，存放{position[0], position[1], step}，并且按照steps从小到大排序。如果某个position第一次从队列中弹出，那么根据贪心思想，意味着从起点到达这个position的最短路径就是steps。
注意，已经被确认最短路径的position就再不需要放入队列中。
public int shortestDistance(int[][] maze, int[] start, int[] destination) {
    if (maze == null || maze.length == 0 || maze[0].length == 0) return -1;
    int m = maze.length, n = maze[0].length;
int[] dx = new int[] {1, -1, 0, 0};
    int[] dy = new int[] {0, 0, 1, -1};
    boolean[] visited = new boolean[m][n]; //helper数组判断是否已访问

    //创建一个小根堆，保证poll出来的是最短距离。a[2]-b[2]为走的步数
    PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> a[2] - b[2]);
    minHeap.offer(new int[] {start[0], start[1], 0}); //原放入start，现多一位步数
    while (!minHeap.isEmpty()) {
        int[] curr = minHeap.poll();
        int x = curr[0], y = curr[1];
        
        if (visited[x][y]) continue; 
        visited[x][y] = true; //设置已访问
        if (x == destination[0] && y == destination[1]) return curr[2];
        for (int k = 0; k < 4; k++) {
            int i = x + dx[k];    
            int j = y + dy[k];
            int step = 0;
            // 不越界且为0是通路
            while (i >= 0 && j >= 0 && i < m && j < n && maze[i][j] == 0) {
                step++;
                i += dx[k]; // increment i,j 继续尝试四个方位
                j += dy[k];
}
minHeap.offer(new int[] {i, j, curr[2] + step}); // 放入小根堆
}
}
    return -1;
}
时间复杂度O(mn*log(mn)), 空间复杂度O(mn)

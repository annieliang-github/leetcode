Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.Preserve the original relative order of the nodes in each of the two partitions.


只需维护两个链表，small 链表按顺序存储所有小于 x 的节点，large 链表按顺序存储所有大于等于 x 的节点。遍历完原链表后，将 small 尾节点指向 large 的头节点即能完成对链表的分隔

时间复杂度O(n)，空间复杂度O(1)

public ListNode partition(ListNode head, int x) {
        ListNode small = new ListNode(0);  //small 和 large 节点指向当前链表的末尾节点
        ListNode large = new ListNode(0);
        ListNode smallHead = small; //smallHead 和 largeHead 分别为两个链表的哑节点
        ListNode largeHead = large;
       
        ListNode ptr = head;
        while (ptr != null) {
            if (ptr.val >= x) {
                large.next = ptr; // 续上，并向前移动指针
                large = large.next;
            } else {
                small.next = ptr;
                small = small.next;
            }
            ptr = ptr.next;
        }
        small.next = largeHead.next; //真正意义上的 large 链表的头节点
        large.next = null; //遍历结束后，将 large.next 置空
        return smallHead.next;
}


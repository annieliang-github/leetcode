Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0.
Input: target = 7, nums = [2,3,1,2,4,3]        Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

方法1：暴力 -> 时间复杂度O(n^2) 空间复杂度O(1)

public int minSubArrayLen(int s, int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                if (sum >= s) {
                    ans = Math.min(ans, j - i + 1);
                    break;
                }
            }
        }
        return ans == Integer.MAX_VALUE ? 0 : ans;
}

方法二：滑动窗口 -> 时间复杂度O(n)，left和right最多各移动n次。空间复杂度O(1)

每一轮迭代，将 nums[right] 加到 sum，如果 sum ≥ target，则更新子数组的最小长度（此时子数组的长度是 right - left +1），然后将 nums[left] 从 sum 中减去并将 left 右移，直到 sum < target，在此过程中同样更新子数组的最小长度。在每一轮迭代的最后，将 right 右移。

public int minSubArrayLen(int target, int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;
        int left = 0, right = 0, sum = 0, ans = Integer.MAX_VALUE; // 一点点缩小ans
        while (right < n) {
            sum += nums[right]; // 先加上右边指针的数
            while (sum >= target) { // 超过target，就把左指针向右移，重新计算sum
                ans = Math.min(ans, right - left + 1);
                sum -= nums[left];
                left++;
            }
            right++; //右移right
        }
        return ans == Integer.MAX_VALUE ? 0 : ans;
}

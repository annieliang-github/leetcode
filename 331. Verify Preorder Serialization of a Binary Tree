One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node.
Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.
解法一：栈。简单的说就是不断的砍掉叶子节点。最后看看能不能全部砍掉，时空复杂度O(n)
当一个节点不是叶子节点的时候，那么它必定至少有一个孩子非空。有两种情况：两个孩子都非"#"（空）；一个孩子为"#"（空），另一个孩子非"#"（空）；

把有效的叶子节点使用 "#" 代替。 比如把 4## 替换成 # 。此时，叶子节点会变成空节点。

public boolean isValidSerialization(String preorder) {
        Stack<String> stack = new Stack<>();
        for (String s : preorder.split(",")) {
            stack.push(s);
            while (stack.size() >= 3 && stack.get(stack.size() - 1).equals("#") && stack.get(stack.size()-2).equals("#") && !stack.get(stack.size()-3).equals("#")) {
                for (int i = 0; i < 3; i++) stack.pop(); //pop三次
                stack.push("#");
            }
        }
        return stack.size() == 1 && stack.pop().equals("#");
        //root后面跟了两个#，把三个都pop出去再加入一个新的进来，stack里只有一个#
}

解法二：在树中，所有节点的入度之和等于出度之和。可以根据这个特点判断输入序列是否为有效。"#"会提供 0 个出度和 1 个入度。非空节点会提供 2 个出度和 1 个入度（root入度是 0）

注意：每加入一个节点 都要先减去一个入度。若该节点是非空节点 还要再加上两个出度

由于根节点没有父节点，所以其入度为 0，出度为 2。因此 diff 初始化为 1，是为了在加入根节点的时候，diff 先减去 1（入度），再加上 2（出度），此时 diff 正好应该是2.

public boolean isValidSerialization(String preorder) {
        int diff = 1;
        for (String s : preorder.split(",")) {
            diff--;
            if (diff < 0) return false;
            if (!s.equals("#")) diff += 2;
        }
        return diff == 0;
}

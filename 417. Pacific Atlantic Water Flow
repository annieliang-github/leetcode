
Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top, the "Atlantic ocean" touches the right and bottom. Water can only flow from a cell to another one with height equal or lower. Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.


class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        // start from the out boundary of both oceans, explore the matrix and find heights >= than current, meanning they can flow into the ocean
        // find the intersection of both ocean heights
        List<List<Integer>> ans = new ArrayList<>();
        int m = heights.length, n = heights[0].length;
        boolean[][] reachP = new boolean[m][n];
        boolean[][] reachA = new boolean[m][n]; // if it's reachable
        int min = Integer.MIN_VALUE;
        for (int i = 0; i < m; i++) {
            dfs(heights, i, 0, min, reachP); // each row in left most col for pacific ocean
            dfs(heights, i, n - 1, min, reachA); // each row in right most col for atlantic ocean
        }
        for (int i = 0; i < n; i++) {
            dfs(heights, 0, i, min, reachP); // each col in top row for pacific ocean;
            dfs(heights, m - 1, i, min, reachA); // each col in bottom row for atlantic ocean;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (reachP[i][j] && reachA[i][j]) ans.add(Arrays.asList(i, j));
            }
        }
        return ans;
    }
    private void dfs(int[][] heights, int i, int j, int prev, boolean[][] reach) {
        int m = heights.length, n = heights[0].length;
        // need to find the height >= prev
        if (i < 0 || j < 0 || i >= m || j >= n || reach[i][j] || heights[i][j] < prev) return;
        reach[i][j] = true;
        prev = heights[i][j];
        dfs(heights, i + 1, j, prev, reach);
        dfs(heights, i - 1, j, prev, reach);
        dfs(heights, i, j + 1, prev, reach);
        dfs(heights, i, j - 1, prev, reach);
    }
}


时间复杂度 O(mn) 空间复杂度O(mn)

Evaluate the value of an arithmetic expression in Reverse Polish Notation.
Valid operators are +, -, *, and /. 
Input: tokens = ["2","1","+","3","*"]    Output: 9    Explanation: ((2 + 1) * 3) = 9

使用一个栈存储操作数，从左到右遍历逆波兰表达式，进行如下操作：
如果遇到操作数，则将操作数入栈；如果遇到运算符，则将两个操作数出栈，其中先出栈的是右操作数，后出栈的是左操作数，使用运算符对两个操作数进行运算，将运算得到的新操作数入栈。遍历完毕之后，栈内只有一个元素，该元素即为逆波兰表达式的值。

时间复杂度O(n)，空间复杂度O(n)
public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<>();
        int len = tokens.length;
        for (int i = 0; i < len; i++) {
            String token = tokens[i];
            if (isNumber(token)) { // 如果是数字，入栈
                stack.push(Integer.parseInt(token)); //转换成int再放入
            } else { // 如果不是数字，需要pop两个，先出的为右数，后出为左数
                int num2 = stack.pop();
                int num1 = stack.pop();
                switch (token) {
                    case "+":
                        stack.push(num1 + num2);
                        break;
                    case "-":
                        stack.push(num1 - num2);
                        break;
                    case "*":
                        stack.push(num1 * num2);
                        break;
                    case "/":
                        stack.push(num1 / num2);
                        break;
                }
            } 
        }
        return stack.pop();
}
private boolean isNumber(String token) { //如果str不是加减乘除，就是num
        return !("+".equals(token) || "-".equals(token) || 
             "*".equals(token) || "/".equals(token));
}


You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like.
class Solution {
    public int maxProfit(int[] prices) {
        //由于不限制交易次数，只要今天股价比昨天高，就交易
        if (prices.length < 2) return 0;
        int res = 0;
        for (int i = 1; i < prices.length; i++) {
            //对于 「今天的股价 - 昨天的股价」，得到的结果有 3 种可能：
            //① 正数，② 000，③负数。贪心算法的决策是： 只加正数
            res += Math.max(prices[i] - prices[i - 1], 0);
        }
        return res;
    }
}
时间复杂度：O(N)O；空间复杂度：O(1)
class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length < 2) return 0;
        // dp数组 0：持有现金, 1：持有股票
        int[][] dp = new int[prices.length][2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for (int i = 1; i < prices.length; i++) {
            //当天持有现金：前一天持有现金不动，或前一天持有股票今天卖了
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            //当天持有股票：前一天持有股票不动，或前一天持有现金今天买了股票
            dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }
        return dp[prices.length - 1][0]; //最后一天要卖掉所以是[0]
    }
}
时间、空间复杂度均为O(n）

也可用滚动数组：space: O(1)，分别使用两个滚动变量，将一维数组状态优化到常数大小
int cash = 0, hold = -prices[0];
        int preCash = cash, preHold = hold;
        for (int i = 1; i < len; i++) {
            cash = Math.max(preCash, preHold + prices[i]);
            hold = Math.max(preHold, preCash - prices[i]);
            preCash = cash;
            preHold = hold;
        }
        return cash;

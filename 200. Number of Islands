Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int rows = grid.length;
        int cols = grid[0].length;
        int numIsland = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    numIsland++; //最终岛屿的数量就是dfs的次数
                    dfs(grid, i, j); //若该点为 1，则以其为起始节点开始dfs
                }
            }
        }
        return numIsland;
}

private void dfs(char[][] grid, int i, int j) {
        int rows = grid.length;
        int cols = grid[0].length;
        if (i < 0 || j < 0 || i >= rows || j >= cols || grid[i][j] == '0') {
            return; //查看是否越界，如果该点为0，不继续
        }
        grid[i][j] = '0'; //每个搜索到的1都会被重新标记为0，防止二次访问
        dfs(grid, i - 1, j);
        dfs(grid, i + 1, j);
        dfs(grid, i, j - 1);
        dfs(grid, i, j + 1);
}

时间复杂度O(mn） 空间复杂度O(mn)：在最坏情况下，整个网格均为陆地

Follow up: this path can be either increasing or decreasing.

当遍历到某一点root的时候，有四种可能，向下走是递增和向下走是递减，还有向左走还是向右走。所以在递归返回的时候返回一个数组，[0]是向下走递增，[1]是向下走递减
int ans = 0;
public int longestConsecutive(TreeNode root) {
    dfs(root);
    return ans;
}
private int[] dfs(TreeNode root) {
    if (root == null) return new int[] {0, 0};
    int[] lens = {1, 1}; //只有root的时候的路径长度
    int[] left = dfs(root.left);
    int[] right = dfs(root.right); //左右儿子向下最长递增，递减路径
    if (root.left != null) { // 左子树非空，能否接到root上去？
        if (root.left.val == root.val+1) lens[0] = Math.max(lens[0], left[0]+1);
    if (root.left.val == root.val-1) lens[1] = Math.max(lens[1], left[1]+1);
}
if (root.right != null) {
    if (root.right.val==root.val+1) lens[0] = Math.max(lens[0], right[0]+1);
    if (root.right.val==root.val-1) lens[1] = Math.max(lens[1], right[1]+1);
}
ans = Math.max(ans, lens[0] + lens[1] - 1); //相加以后root重复计算两次，减去
return ans;
}

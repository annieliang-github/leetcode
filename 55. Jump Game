Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.
Input: nums = [2,3,1,1,4]        Output: true

方法一：explicitBFS，时间复杂度O（m+n），空间复杂度O(n)，储存节点的queue开销
每个点都能够判断是否满足条件，即为：该点的index和数值相加和数组的长度相比较
可以剪枝的场景：邻节点的index如果已经大于长度则不需要继续跳跃
public boolean canJump(int[] nums) {
        if (nums.length == 0) return true;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        int[] visited = new int[nums.length];
        visited[0] = 1;
        
        while (!queue.isEmpty()) {
            int curr = queue.poll();
            int jumpLen = nums[curr];
            if (jumpLen + curr >= nums.length - 1) return true; //可以跳到结尾
            for (int i = 1; i <= jumpLen; i++) {
                int nextIndex = curr + i; //挨个loop尝试
                if (nextIndex >= nums.length) break; //跳过头了，剪枝
                if (visited[nextIndex] != 1) { //没访问过，入queue
                    queue.offer(nextIndex);
                    visited[nextIndex] = 1;
                }
            }
        }
        return false;
}

方法二：implicit BFS  时间复杂度O(n)，空间复杂度O(1)

如果某一个作为 起跳点 的格子可跳的距离是 3，那么表示后面 3 个格子都可以作为 起跳点。
可以对每一个能作为 起跳点 的格子都尝试跳一次，把 能跳到最远的距离 不断更新。
如果可以一直跳到最后，就成功了。

public boolean canJump(int[] nums) {
        int rightMost = 0;
        for (int i = 0 ; i < nums.length; i++) {
            if (rightMost < i) return false; // 无法reach最后一个
            rightMost = Math.max(rightMost, i + nums[i]);
        }
        return true;
}


class Solution {
    public boolean canJump(int[] nums) {
        int len = nums.length;
        int lastIndex = len - 1;
        for (int i = len - 1; i >= 0; i--) {
            if (i + nums[i] >= lastIndex) {
                lastIndex = i; // from back move forward if it can be reached
            }
        }
        return lastIndex == 0; // see if the first index is reached;
    }
}

